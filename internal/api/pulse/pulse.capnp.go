// Code generated by capnpc-go. DO NOT EDIT.

package pulse

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Announcement struct{ capnp.Struct }
type Announcement_Which uint16

const (
	Announcement_Which_heartbeat Announcement_Which = 0
	Announcement_Which_join      Announcement_Which = 1
	Announcement_Which_leave     Announcement_Which = 2
)

func (w Announcement_Which) String() string {
	const s = "heartbeatjoinleave"
	switch w {
	case Announcement_Which_heartbeat:
		return s[0:9]
	case Announcement_Which_join:
		return s[9:13]
	case Announcement_Which_leave:
		return s[13:18]

	}
	return "Announcement_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Announcement_TypeID is the unique identifier for the type Announcement.
const Announcement_TypeID = 0xffb4e20298d498a4

func NewAnnouncement(s *capnp.Segment) (Announcement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announcement{st}, err
}

func NewRootAnnouncement(s *capnp.Segment) (Announcement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Announcement{st}, err
}

func ReadRootAnnouncement(msg *capnp.Message) (Announcement, error) {
	root, err := msg.Root()
	return Announcement{root.Struct()}, err
}

func (s Announcement) String() string {
	str, _ := text.Marshal(0xffb4e20298d498a4, s.Struct)
	return str
}

func (s Announcement) Which() Announcement_Which {
	return Announcement_Which(s.Struct.Uint16(0))
}
func (s Announcement) Heartbeat() (Announcement_Heartbeat, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != heartbeat")
	}
	p, err := s.Struct.Ptr(0)
	return Announcement_Heartbeat{Struct: p.Struct()}, err
}

func (s Announcement) HasHeartbeat() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Announcement) SetHeartbeat(v Announcement_Heartbeat) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated Announcement_Heartbeat struct, preferring placement in s's segment.
func (s Announcement) NewHeartbeat() (Announcement_Heartbeat, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAnnouncement_Heartbeat(s.Struct.Segment())
	if err != nil {
		return Announcement_Heartbeat{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Announcement) Join() (string, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != join")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Announcement) HasJoin() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Announcement) JoinBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Announcement) SetJoin(v string) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetText(0, v)
}

func (s Announcement) Leave() (string, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != leave")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Announcement) HasLeave() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Announcement) LeaveBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Announcement) SetLeave(v string) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetText(0, v)
}

// Announcement_List is a list of Announcement.
type Announcement_List struct{ capnp.List }

// NewAnnouncement creates a new list of Announcement.
func NewAnnouncement_List(s *capnp.Segment, sz int32) (Announcement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Announcement_List{l}, err
}

func (s Announcement_List) At(i int) Announcement { return Announcement{s.List.Struct(i)} }

func (s Announcement_List) Set(i int, v Announcement) error { return s.List.SetStruct(i, v.Struct) }

func (s Announcement_List) String() string {
	str, _ := text.MarshalList(0xffb4e20298d498a4, s.List)
	return str
}

// Announcement_Future is a wrapper for a Announcement promised by a client call.
type Announcement_Future struct{ *capnp.Future }

func (p Announcement_Future) Struct() (Announcement, error) {
	s, err := p.Future.Struct()
	return Announcement{s}, err
}

func (p Announcement_Future) Heartbeat() Announcement_Heartbeat_Future {
	return Announcement_Heartbeat_Future{Future: p.Future.Field(0, nil)}
}

type Announcement_Heartbeat struct{ capnp.Struct }
type Announcement_Heartbeat_record Announcement_Heartbeat
type Announcement_Heartbeat_record_Which uint16

const (
	Announcement_Heartbeat_record_Which_none    Announcement_Heartbeat_record_Which = 0
	Announcement_Heartbeat_record_Which_text    Announcement_Heartbeat_record_Which = 1
	Announcement_Heartbeat_record_Which_binary  Announcement_Heartbeat_record_Which = 2
	Announcement_Heartbeat_record_Which_pointer Announcement_Heartbeat_record_Which = 3
)

func (w Announcement_Heartbeat_record_Which) String() string {
	const s = "nonetextbinarypointer"
	switch w {
	case Announcement_Heartbeat_record_Which_none:
		return s[0:4]
	case Announcement_Heartbeat_record_Which_text:
		return s[4:8]
	case Announcement_Heartbeat_record_Which_binary:
		return s[8:14]
	case Announcement_Heartbeat_record_Which_pointer:
		return s[14:21]

	}
	return "Announcement_Heartbeat_record_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Announcement_Heartbeat_TypeID is the unique identifier for the type Announcement_Heartbeat.
const Announcement_Heartbeat_TypeID = 0xa3743b0938b604e5

func NewAnnouncement_Heartbeat(s *capnp.Segment) (Announcement_Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Announcement_Heartbeat{st}, err
}

func NewRootAnnouncement_Heartbeat(s *capnp.Segment) (Announcement_Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Announcement_Heartbeat{st}, err
}

func ReadRootAnnouncement_Heartbeat(msg *capnp.Message) (Announcement_Heartbeat, error) {
	root, err := msg.Root()
	return Announcement_Heartbeat{root.Struct()}, err
}

func (s Announcement_Heartbeat) String() string {
	str, _ := text.Marshal(0xa3743b0938b604e5, s.Struct)
	return str
}

func (s Announcement_Heartbeat) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Announcement_Heartbeat) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Announcement_Heartbeat) Record() Announcement_Heartbeat_record {
	return Announcement_Heartbeat_record(s)
}

func (s Announcement_Heartbeat_record) Which() Announcement_Heartbeat_record_Which {
	return Announcement_Heartbeat_record_Which(s.Struct.Uint16(8))
}
func (s Announcement_Heartbeat_record) SetNone() {
	s.Struct.SetUint16(8, 0)

}

func (s Announcement_Heartbeat_record) Text() (string, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Announcement_Heartbeat_record) HasText() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Announcement_Heartbeat_record) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Announcement_Heartbeat_record) SetText(v string) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetText(0, v)
}

func (s Announcement_Heartbeat_record) Binary() ([]byte, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != binary")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Announcement_Heartbeat_record) HasBinary() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Announcement_Heartbeat_record) SetBinary(v []byte) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetData(0, v)
}

func (s Announcement_Heartbeat_record) Pointer() (capnp.Ptr, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != pointer")
	}
	return s.Struct.Ptr(0)
}

func (s Announcement_Heartbeat_record) HasPointer() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Announcement_Heartbeat_record) SetPointer(v capnp.Ptr) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v)
}

// Announcement_Heartbeat_List is a list of Announcement_Heartbeat.
type Announcement_Heartbeat_List struct{ capnp.List }

// NewAnnouncement_Heartbeat creates a new list of Announcement_Heartbeat.
func NewAnnouncement_Heartbeat_List(s *capnp.Segment, sz int32) (Announcement_Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Announcement_Heartbeat_List{l}, err
}

func (s Announcement_Heartbeat_List) At(i int) Announcement_Heartbeat {
	return Announcement_Heartbeat{s.List.Struct(i)}
}

func (s Announcement_Heartbeat_List) Set(i int, v Announcement_Heartbeat) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Announcement_Heartbeat_List) String() string {
	str, _ := text.MarshalList(0xa3743b0938b604e5, s.List)
	return str
}

// Announcement_Heartbeat_Future is a wrapper for a Announcement_Heartbeat promised by a client call.
type Announcement_Heartbeat_Future struct{ *capnp.Future }

func (p Announcement_Heartbeat_Future) Struct() (Announcement_Heartbeat, error) {
	s, err := p.Future.Struct()
	return Announcement_Heartbeat{s}, err
}

func (p Announcement_Heartbeat_Future) Record() Announcement_Heartbeat_record_Future {
	return Announcement_Heartbeat_record_Future{p.Future}
}

// Announcement_Heartbeat_record_Future is a wrapper for a Announcement_Heartbeat_record promised by a client call.
type Announcement_Heartbeat_record_Future struct{ *capnp.Future }

func (p Announcement_Heartbeat_record_Future) Struct() (Announcement_Heartbeat_record, error) {
	s, err := p.Future.Struct()
	return Announcement_Heartbeat_record{s}, err
}

func (p Announcement_Heartbeat_record_Future) Pointer() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_c2974e3dc137fcee = "x\xdat\x91Ok\x13A\x18\xc6\x9f\xe7\x9dM\xa3\xb0" +
	"!\xd9n@\x14EP/\x15\x12\xd4\"JD\xea\x9f" +
	"\x16*\xa8\xf4\x0d\x16<xp\x9b\x0c$\x92\xce\x868" +
	"\xf1\xcf\xc9\x8fa\xc1\xa3z\xf6R\xbc\xeb\xd1\xb3\x9f@" +
	"\x10\xc1\x83\x9f\xa0:\xb2\x81\xed\x82\xe0\x9cf^f\xde" +
	"\xdf\xf3\x9b\xb7\xf5\xf3\x86\\\xac\xe5\x02\xe8\xc9\xdaR\xf8" +
	"\x1e}\xbcz\xf4\x9a\x7f\x0b=N\x09\xef\xf6\xbe\xee\xc9" +
	"\xb7\xfd\x80\x1a\xeb\xc0\xea)\x9e`\xda)\xb6\xe9\x0a\x9f" +
	"\x83\xe1r\xfc\xe6\xf6\xbay\xbf\x0f=K\xa9\xden\xb3" +
	"\xce\x88\xd1\xea\x98}\x82\xe9\x9c?\xc0\xaa\x97\xc6d\xf8" +
	"up\xe5\xd3\xf5\xfb\xaf?c\x83u\x03\xa4w\xe4K" +
	"\xba-\xc7\x804\x93\x0f\xe8\x84\xe9|\xf2\xd4v\x07\x99" +
	"\x99\xbai\xef\xa6s\xf9\xdc\x0d\xec\xaeu\xbe\xbbi\xb3" +
	"\x99\xdf\xb1&\xf3[\xa4\x1e1\x11\x10\x11HV\xce\x00" +
	"z\xceP/\x08\x8bU\x85K:=H\xdd\xfb\x09k" +
	"\x10\xd6\xc0\xb5\x99\x1d\xe4\xb3\xe1!$\xfa\x1f$\xf3\xdd" +
	"\xc5U\x0e\xb5e\xa28\x846\x0bTv\x1e\xd0G\x86" +
	":\x126\xf8'\xb4)@b\x8b\xeacC\x9d\x08\x1b" +
	"\xf2;\xb4i\x80d\xdc\x03th\xa8Sa\xc3\x1c\x84" +
	"6# \xd9\xbd\x05\xe8\xc8P\xbd\xb0\xe9rg\xb1\xd4" +
	"\xf4\xf6\x85g\x0ca\x0c\xae\xed\x8c]6{\xc9\x06\x84" +
	"\x0d\xf0\xd54\x1f;og\\\x86p\x19<L.\xff" +
	"&\x074\"\xabQ$\xec\x87R\x06\xf4\x1a/4\x16" +
	"\x1f\xb6\xd1\x07t\xddP\xb7J\x8b\xa2z\xaf\xb0\xd84" +
	"\xd4\x07\xa5E\xe1\xa6\x97\x00\xbdk\xa8\x0f\x85aT\xf5" +
	"c\xabB\x81l\x81\xcd'\xf9\xd8\x95\x1a\xa7'6{" +
	"f\xcb\xd3\xdf\x00\x00\x00\xff\xff\xe9\xf4\x9c\x91"

func init() {
	schemas.Register(schema_c2974e3dc137fcee,
		0xa3743b0938b604e5,
		0xb4a50344439b0c35,
		0xffb4e20298d498a4)
}
