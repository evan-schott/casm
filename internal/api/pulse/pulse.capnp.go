// Code generated by capnpc-go. DO NOT EDIT.

package pulse

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Heartbeat capnp.Struct
type Heartbeat_meta Heartbeat
type Heartbeat_meta_Which uint16

const (
	Heartbeat_meta_Which_none    Heartbeat_meta_Which = 0
	Heartbeat_meta_Which_text    Heartbeat_meta_Which = 1
	Heartbeat_meta_Which_binary  Heartbeat_meta_Which = 2
	Heartbeat_meta_Which_pointer Heartbeat_meta_Which = 3
)

func (w Heartbeat_meta_Which) String() string {
	const s = "nonetextbinarypointer"
	switch w {
	case Heartbeat_meta_Which_none:
		return s[0:4]
	case Heartbeat_meta_Which_text:
		return s[4:8]
	case Heartbeat_meta_Which_binary:
		return s[8:14]
	case Heartbeat_meta_Which_pointer:
		return s[14:21]

	}
	return "Heartbeat_meta_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0x83bca0e4d70e0e82

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Heartbeat(st), err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Heartbeat(st), err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.Root()
	return Heartbeat(root.Struct()), err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0x83bca0e4d70e0e82, capnp.Struct(s))
	return str
}

func (s Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Heartbeat) DecodeFromPtr(p capnp.Ptr) Heartbeat {
	return Heartbeat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Heartbeat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Heartbeat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat) Ttl() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Heartbeat) SetTtl(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Heartbeat) Meta() Heartbeat_meta { return Heartbeat_meta(s) }

func (s Heartbeat_meta) Which() Heartbeat_meta_Which {
	return Heartbeat_meta_Which(capnp.Struct(s).Uint16(8))
}
func (s Heartbeat_meta) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat_meta) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat_meta) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat_meta) SetNone() {
	capnp.Struct(s).SetUint16(8, 0)

}

func (s Heartbeat_meta) Text() (string, error) {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != text")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Heartbeat_meta) HasText() bool {
	if capnp.Struct(s).Uint16(8) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat_meta) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat_meta) SetText(v string) error {
	capnp.Struct(s).SetUint16(8, 1)
	return capnp.Struct(s).SetText(0, v)
}

func (s Heartbeat_meta) Binary() ([]byte, error) {
	if capnp.Struct(s).Uint16(8) != 2 {
		panic("Which() != binary")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Heartbeat_meta) HasBinary() bool {
	if capnp.Struct(s).Uint16(8) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat_meta) SetBinary(v []byte) error {
	capnp.Struct(s).SetUint16(8, 2)
	return capnp.Struct(s).SetData(0, v)
}

func (s Heartbeat_meta) Pointer() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(8) != 3 {
		panic("Which() != pointer")
	}
	return capnp.Struct(s).Ptr(0)
}

func (s Heartbeat_meta) HasPointer() bool {
	if capnp.Struct(s).Uint16(8) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat_meta) SetPointer(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(8, 3)
	return capnp.Struct(s).SetPtr(0, v)
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List = capnp.StructList[Heartbeat]

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Heartbeat](l), err
}

// Heartbeat_Future is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Future struct{ *capnp.Future }

func (p Heartbeat_Future) Struct() (Heartbeat, error) {
	s, err := p.Future.Struct()
	return Heartbeat(s), err
}

func (p Heartbeat_Future) Meta() Heartbeat_meta_Future { return Heartbeat_meta_Future{p.Future} }

// Heartbeat_meta_Future is a wrapper for a Heartbeat_meta promised by a client call.
type Heartbeat_meta_Future struct{ *capnp.Future }

func (p Heartbeat_meta_Future) Struct() (Heartbeat_meta, error) {
	s, err := p.Future.Struct()
	return Heartbeat_meta(s), err
}

func (p Heartbeat_meta_Future) Pointer() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_c2974e3dc137fcee = "x\xdaD\xcd\xb1J#Q\x18\x05\xe0s\xfe;\x93l" +
	"1\x93d\x92aw\xbb\x85e\xb70\x90\xa0\x85\x88\x01" +
	"Q\xb4\xb1\x12oag\xe1D/$\x90L\xc6xE" +
	"\xad\x04\xc5g\xb0\x15\xc4\x17\xb0\xb6\xd1\x97\x10\xac\x05;" +
	"A\xc4B\x88^\x19A\xf37?\x1c8\xdf\xa9\\," +
	"xS\xe1/\x81\xe8\xdf~\xc1\x1d\x95J\xb7\xf7gW" +
	"\xc7\xd0\x01\xc5=\x8ef\xae\xe7VNo\xe0\xb3\x08D" +
	"O\x97\xd1k\xfe_\xf6@\xb7\xbdt\xa2\xce\xc3\xff\xcf" +
	"\xd0?)\xe3\xde\x1a\x8b\xf4\xe8\xd5\xa6y\x07\xd6f\xf9" +
	"\x80\x86\xcbv{;\xa6\xb9\x990K\xb3\xd6\xb2I\x86" +
	"\x7fl\xdb$v\x95\xd4?\x94\x07x\x04\xa2\x89\xbf\x80" +
	"\xfe\xa7\xa8'\x85\xf9\x8d\x07\xa2F\x1dR\xb4\xb6G\x1f" +
	"B\x1f,\xf7\x8dM\xbeU\xf9R?\xd1f\xdf(\x9b" +
	"\xe8\x8a\xf2\x02\xe7b\xe6rR\x07\xf4\xba\xa2\xee\x08C" +
	"\xbe\xbb\x98\x02D&O7\x14uO\x18\xca\x9b\x8b\xa9" +
	"\x80\xa8\xdb\x02\xf4\x96\xa2\xce\x84\xa1\x1a\xb9\x98\x1e\x10\xf5" +
	"\x17\x01\xddQ\xd4VXN\x07\xa9A\xa1l\xcd\xbee" +
	"\x00a\x00\xce\xb7\xbbi2<`\x08a\x08\x1ef\x83" +
	"nj\xcd\x90U\x08\xab\xe0G\x00\x00\x00\xff\xff=\x18" +
	"W\xc9"

func init() {
	schemas.Register(schema_c2974e3dc137fcee,
		0x83bca0e4d70e0e82,
		0xf3250da303854371)
}
