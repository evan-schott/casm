// Code generated by capnpc-go. DO NOT EDIT.

package pulse

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Event struct{ capnp.Struct }
type Event_Which uint16

const (
	Event_Which_heartbeat Event_Which = 0
	Event_Which_join      Event_Which = 1
	Event_Which_leave     Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "heartbeatjoinleave"
	switch w {
	case Event_Which_heartbeat:
		return s[0:9]
	case Event_Which_join:
		return s[9:13]
	case Event_Which_leave:
		return s[13:18]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xcb0a29c8b2cfe159

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xcb0a29c8b2cfe159, s.Struct)
	return str
}

func (s Event) Which() Event_Which {
	return Event_Which(s.Struct.Uint16(0))
}
func (s Event) Heartbeat() (Event_Heartbeat, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != heartbeat")
	}
	p, err := s.Struct.Ptr(0)
	return Event_Heartbeat{Struct: p.Struct()}, err
}

func (s Event) HasHeartbeat() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Event) SetHeartbeat(v Event_Heartbeat) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated Event_Heartbeat struct, preferring placement in s's segment.
func (s Event) NewHeartbeat() (Event_Heartbeat, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewEvent_Heartbeat(s.Struct.Segment())
	if err != nil {
		return Event_Heartbeat{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) Join() (string, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != join")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event) HasJoin() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Event) JoinBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetJoin(v string) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetText(0, v)
}

func (s Event) Leave() (string, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != leave")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event) HasLeave() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Event) LeaveBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetLeave(v string) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetText(0, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0xcb0a29c8b2cfe159, s.List)
	return str
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (p Event_Future) Struct() (Event, error) {
	s, err := p.Future.Struct()
	return Event{s}, err
}

func (p Event_Future) Heartbeat() Event_Heartbeat_Future {
	return Event_Heartbeat_Future{Future: p.Future.Field(0, nil)}
}

type Event_Heartbeat struct{ capnp.Struct }
type Event_Heartbeat_meta Event_Heartbeat
type Event_Heartbeat_meta_Which uint16

const (
	Event_Heartbeat_meta_Which_none    Event_Heartbeat_meta_Which = 0
	Event_Heartbeat_meta_Which_text    Event_Heartbeat_meta_Which = 1
	Event_Heartbeat_meta_Which_binary  Event_Heartbeat_meta_Which = 2
	Event_Heartbeat_meta_Which_pointer Event_Heartbeat_meta_Which = 3
)

func (w Event_Heartbeat_meta_Which) String() string {
	const s = "nonetextbinarypointer"
	switch w {
	case Event_Heartbeat_meta_Which_none:
		return s[0:4]
	case Event_Heartbeat_meta_Which_text:
		return s[4:8]
	case Event_Heartbeat_meta_Which_binary:
		return s[8:14]
	case Event_Heartbeat_meta_Which_pointer:
		return s[14:21]

	}
	return "Event_Heartbeat_meta_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Heartbeat_TypeID is the unique identifier for the type Event_Heartbeat.
const Event_Heartbeat_TypeID = 0xa7780dcc55ae3d72

func NewEvent_Heartbeat(s *capnp.Segment) (Event_Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Event_Heartbeat{st}, err
}

func NewRootEvent_Heartbeat(s *capnp.Segment) (Event_Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Event_Heartbeat{st}, err
}

func ReadRootEvent_Heartbeat(msg *capnp.Message) (Event_Heartbeat, error) {
	root, err := msg.Root()
	return Event_Heartbeat{root.Struct()}, err
}

func (s Event_Heartbeat) String() string {
	str, _ := text.Marshal(0xa7780dcc55ae3d72, s.Struct)
	return str
}

func (s Event_Heartbeat) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Event_Heartbeat) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Event_Heartbeat) Meta() Event_Heartbeat_meta { return Event_Heartbeat_meta(s) }

func (s Event_Heartbeat_meta) Which() Event_Heartbeat_meta_Which {
	return Event_Heartbeat_meta_Which(s.Struct.Uint16(8))
}
func (s Event_Heartbeat_meta) SetNone() {
	s.Struct.SetUint16(8, 0)

}

func (s Event_Heartbeat_meta) Text() (string, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Event_Heartbeat_meta) HasText() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Event_Heartbeat_meta) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Event_Heartbeat_meta) SetText(v string) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetText(0, v)
}

func (s Event_Heartbeat_meta) Binary() ([]byte, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != binary")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Event_Heartbeat_meta) HasBinary() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Event_Heartbeat_meta) SetBinary(v []byte) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetData(0, v)
}

func (s Event_Heartbeat_meta) Pointer() (capnp.Ptr, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != pointer")
	}
	return s.Struct.Ptr(0)
}

func (s Event_Heartbeat_meta) HasPointer() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Event_Heartbeat_meta) SetPointer(v capnp.Ptr) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v)
}

// Event_Heartbeat_List is a list of Event_Heartbeat.
type Event_Heartbeat_List struct{ capnp.List }

// NewEvent_Heartbeat creates a new list of Event_Heartbeat.
func NewEvent_Heartbeat_List(s *capnp.Segment, sz int32) (Event_Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Event_Heartbeat_List{l}, err
}

func (s Event_Heartbeat_List) At(i int) Event_Heartbeat { return Event_Heartbeat{s.List.Struct(i)} }

func (s Event_Heartbeat_List) Set(i int, v Event_Heartbeat) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Event_Heartbeat_List) String() string {
	str, _ := text.MarshalList(0xa7780dcc55ae3d72, s.List)
	return str
}

// Event_Heartbeat_Future is a wrapper for a Event_Heartbeat promised by a client call.
type Event_Heartbeat_Future struct{ *capnp.Future }

func (p Event_Heartbeat_Future) Struct() (Event_Heartbeat, error) {
	s, err := p.Future.Struct()
	return Event_Heartbeat{s}, err
}

func (p Event_Heartbeat_Future) Meta() Event_Heartbeat_meta_Future {
	return Event_Heartbeat_meta_Future{p.Future}
}

// Event_Heartbeat_meta_Future is a wrapper for a Event_Heartbeat_meta promised by a client call.
type Event_Heartbeat_meta_Future struct{ *capnp.Future }

func (p Event_Heartbeat_meta_Future) Struct() (Event_Heartbeat_meta, error) {
	s, err := p.Future.Struct()
	return Event_Heartbeat_meta{s}, err
}

func (p Event_Heartbeat_meta_Future) Pointer() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_c2974e3dc137fcee = "x\xda\\\x90Mk\x13Q\x14\x86\xdf\xf7\xdc\x99\x8e\x94" +
	"\x19\x92\xc9\x04\xdcT\x04\xb1\x8b\x14\x1a\xfcX\x08\x85\xe2" +
	"\x07\x06[\xfc\xa0\xa7\x18Pp\xe1T/&\x92L\x86" +
	"x\xadu\xe5\x7fp\xe3Op\xa7 \xfe\x01]\x09\x0a" +
	".]\xeb\xa6;\x7fA\xf5\xca\x04\xa6\x03\xde\xd5\xbd\x87" +
	"{\x9e\xf3\x9c\xb7}xE\xce\x873\x01t%\\\xf2" +
	"\xf3\xcdw\xc3o\xc9\xc1[h\x87\xe2\xef\xff\xfc\xfe\xe1" +
	"Ko\xf9+BF@v\x8a\xbf\xb2\xde\xe2\xb6\xca\x17" +
	"\xa0\x7f\xb2\xfa\xe3\xa6\xbb\xb1\xfd\x11\xbaBiZ\x87\x8c" +
	"\x180\xb8h\xb9L0\x9b\xf2\x10lP\x1a\x93\xfe\xf7" +
	"\xd1\xa5O\x9bw\xde|\xc6\x80\x91\x01\xb2\xab\xf2:\xdb" +
	"\x96\x93@6\x94\xf7X\xf7\xe5\xf3\xc93\xdb\x7f\x94K" +
	"Y\x94\x1b\x83}[\xb8\xfe\x96\xcd\xe7n/\xb2\xb9\xdb" +
	"!\xf5\x84\x09\x80\x80@\xda;\x03\xe8YC='\xac" +
	"Nc\x95\xae\xafA\"\xe7&\x0c!\x0c\xc1\xd6\xd4\xba" +
	"\xfc\x98m\xfeg\xdb\xdc\xf5\xab\x1f\x80\xb6M\x10{\xdf" +
	"e5 _\x03\xf4\x81\xa1\x8e\x84\x09\xff\xfa.\x05H" +
	"mU}h\xa8\x13a\"\x7f|\x97\x06H\xc7\x1b\x80" +
	">6\xd4R\x98\x98#\xdfe\x00\xa4\xd3k\x80\x8e\x0c" +
	"\xd5\x09[\xc5\xac\xb0Xj9{\xe0\x18C\x18\x83\x97" +
	"\xf7\xc6E>\x7f\xc9\x04\xc2\x04|U\xce\xc6\x85\xb3s" +
	"v \xec\x80\xc7\xc6\xac\x8d\xe94 \x9b\xc4S\xee\xfa" +
	"z\x07\xd0i\xbc\xd0_\xc43\xd8\x05\xf4\xba\xa1\xee\xd4" +
	"\xf6U\xf5ve\xbfe\xa8wk\xfbj'\xbd\x00\xe8" +
	"-C\xbd'\xf4\xa3\x86\xc7v3\x0ad\x1bl=\x9d" +
	"\x8d\x8bZ\xff\xf4\xc4\xe6\xfb\xb6~\xfd\x0b\x00\x00\xff\xff" +
	"lt\x93{"

func init() {
	schemas.Register(schema_c2974e3dc137fcee,
		0xa7780dcc55ae3d72,
		0xb44947744bd72567,
		0xcb0a29c8b2cfe159)
}
