// Code generated by capnpc-go. DO NOT EDIT.

package routing

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	fmt "fmt"
	strconv "strconv"
)

type Heartbeat capnp.Struct

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0x83bca0e4d70e0e82

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat(st), err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Heartbeat(st), err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.Root()
	return Heartbeat(root.Struct()), err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0x83bca0e4d70e0e82, capnp.Struct(s))
	return str
}

func (s Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Heartbeat) DecodeFromPtr(p capnp.Ptr) Heartbeat {
	return Heartbeat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Heartbeat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Heartbeat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat) Ttl() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Heartbeat) SetTtl(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Heartbeat) Instance() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Heartbeat) SetInstance(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Heartbeat) Hostname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasHostname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat) HostnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetHostname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Heartbeat) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Heartbeat) HasMeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Heartbeat) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Heartbeat) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List = capnp.StructList[Heartbeat]

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Heartbeat](l), err
}

// Heartbeat_Future is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Future struct{ *capnp.Future }

func (p Heartbeat_Future) Struct() (Heartbeat, error) {
	s, err := p.Future.Struct()
	return Heartbeat(s), err
}

type View capnp.Client

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0xb8cc1b0ba89ddfd2

func (c View) First(ctx context.Context, params func(View_first_Params) error) (View_first_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      0,
			InterfaceName: "routing.capnp:View",
			MethodName:    "first",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_first_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_first_Results_Future{Future: ans.Future()}, release
}
func (c View) Last(ctx context.Context, params func(View_last_Params) error) (View_last_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      1,
			InterfaceName: "routing.capnp:View",
			MethodName:    "last",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_last_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_last_Results_Future{Future: ans.Future()}, release
}
func (c View) Prefix(ctx context.Context, params func(View_prefix_Params) error) (View_prefix_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      2,
			InterfaceName: "routing.capnp:View",
			MethodName:    "prefix",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_prefix_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_prefix_Results_Future{Future: ans.Future()}, release
}
func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      3,
			InterfaceName: "routing.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Reverse(ctx context.Context, params func(View_reverse_Params) error) (View_reverse_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      4,
			InterfaceName: "routing.capnp:View",
			MethodName:    "reverse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_reverse_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_reverse_Results_Future{Future: ans.Future()}, release
}
func (c View) Filter(ctx context.Context, params func(View_filter_Params) error) (View_filter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      5,
			InterfaceName: "routing.capnp:View",
			MethodName:    "filter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_filter_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_filter_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View) AddRef() View {
	return View(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View) DecodeFromPtr(p capnp.Ptr) View {
	return View(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View) IsSame(other View) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A View_Server is a View with a local implementation.
type View_Server interface {
	First(context.Context, View_first) error

	Last(context.Context, View_last) error

	Prefix(context.Context, View_prefix) error

	Iter(context.Context, View_iter) error

	Reverse(context.Context, View_reverse) error

	Filter(context.Context, View_filter) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server) View {
	return View(capnp.NewClient(View_NewServer(s)))
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      0,
			InterfaceName: "routing.capnp:View",
			MethodName:    "first",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.First(ctx, View_first{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      1,
			InterfaceName: "routing.capnp:View",
			MethodName:    "last",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Last(ctx, View_last{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      2,
			InterfaceName: "routing.capnp:View",
			MethodName:    "prefix",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Prefix(ctx, View_prefix{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      3,
			InterfaceName: "routing.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      4,
			InterfaceName: "routing.capnp:View",
			MethodName:    "reverse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reverse(ctx, View_reverse{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      5,
			InterfaceName: "routing.capnp:View",
			MethodName:    "filter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Filter(ctx, View_filter{call})
		},
	})

	return methods
}

// View_first holds the state for a server call to View.first.
// See server.Call for documentation.
type View_first struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_first) Args() View_first_Params {
	return View_first_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_first) AllocResults() (View_first_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_first_Results(r), err
}

// View_last holds the state for a server call to View.last.
// See server.Call for documentation.
type View_last struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_last) Args() View_last_Params {
	return View_last_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_last) AllocResults() (View_last_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_last_Results(r), err
}

// View_prefix holds the state for a server call to View.prefix.
// See server.Call for documentation.
type View_prefix struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_prefix) Args() View_prefix_Params {
	return View_prefix_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_prefix) AllocResults() (View_prefix_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_prefix_Results(r), err
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(r), err
}

// View_reverse holds the state for a server call to View.reverse.
// See server.Call for documentation.
type View_reverse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_reverse) Args() View_reverse_Params {
	return View_reverse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_reverse) AllocResults() (View_reverse_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(r), err
}

// View_filter holds the state for a server call to View.filter.
// See server.Call for documentation.
type View_filter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_filter) Args() View_filter_Params {
	return View_filter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_filter) AllocResults() (View_filter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_filter_Results(r), err
}

// View_List is a list of View.
type View_List = capnp.CapList[View]

// NewView creates a new list of View.
func NewView_List(s *capnp.Segment, sz int32) (View_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View](l), err
}

type View_Sender capnp.Client

// View_Sender_TypeID is the unique identifier for the type View_Sender.
const View_Sender_TypeID = 0xb2d6b90294cf783d

func (c View_Sender) Send(ctx context.Context, params func(View_Sender_send_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2d6b90294cf783d,
			MethodID:      0,
			InterfaceName: "routing.capnp:View.Sender",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Sender_send_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View_Sender) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View_Sender) AddRef() View_Sender {
	return View_Sender(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View_Sender) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View_Sender) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View_Sender) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View_Sender) DecodeFromPtr(p capnp.Ptr) View_Sender {
	return View_Sender(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View_Sender) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View_Sender) IsSame(other View_Sender) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View_Sender) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View_Sender) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A View_Sender_Server is a View_Sender with a local implementation.
type View_Sender_Server interface {
	Send(context.Context, View_Sender_send) error
}

// View_Sender_NewServer creates a new Server from an implementation of View_Sender_Server.
func View_Sender_NewServer(s View_Sender_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Sender_Methods(nil, s), s, c)
}

// View_Sender_ServerToClient creates a new Client from an implementation of View_Sender_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Sender_ServerToClient(s View_Sender_Server) View_Sender {
	return View_Sender(capnp.NewClient(View_Sender_NewServer(s)))
}

// View_Sender_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Sender_Methods(methods []server.Method, s View_Sender_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2d6b90294cf783d,
			MethodID:      0,
			InterfaceName: "routing.capnp:View.Sender",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, View_Sender_send{call})
		},
	})

	return methods
}

// View_Sender_send holds the state for a server call to View_Sender.send.
// See server.Call for documentation.
type View_Sender_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Sender_send) Args() View_Sender_send_Params {
	return View_Sender_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_Sender_send) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// View_Sender_List is a list of View_Sender.
type View_Sender_List = capnp.CapList[View_Sender]

// NewView_Sender creates a new list of View_Sender.
func NewView_Sender_List(s *capnp.Segment, sz int32) (View_Sender_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View_Sender](l), err
}

type View_Sender_send_Params capnp.Struct

// View_Sender_send_Params_TypeID is the unique identifier for the type View_Sender_send_Params.
const View_Sender_send_Params_TypeID = 0xe112828076687f1b

func NewView_Sender_send_Params(s *capnp.Segment) (View_Sender_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Sender_send_Params(st), err
}

func NewRootView_Sender_send_Params(s *capnp.Segment) (View_Sender_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Sender_send_Params(st), err
}

func ReadRootView_Sender_send_Params(msg *capnp.Message) (View_Sender_send_Params, error) {
	root, err := msg.Root()
	return View_Sender_send_Params(root.Struct()), err
}

func (s View_Sender_send_Params) String() string {
	str, _ := text.Marshal(0xe112828076687f1b, capnp.Struct(s))
	return str
}

func (s View_Sender_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Sender_send_Params) DecodeFromPtr(p capnp.Ptr) View_Sender_send_Params {
	return View_Sender_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Sender_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Sender_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Sender_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Sender_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Sender_send_Params) Record() (View_Record, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_Sender_send_Params) HasRecord() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Sender_send_Params) SetRecord(v View_Record) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_Sender_send_Params) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Sender_send_Params_List is a list of View_Sender_send_Params.
type View_Sender_send_Params_List = capnp.StructList[View_Sender_send_Params]

// NewView_Sender_send_Params creates a new list of View_Sender_send_Params.
func NewView_Sender_send_Params_List(s *capnp.Segment, sz int32) (View_Sender_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_Sender_send_Params](l), err
}

// View_Sender_send_Params_Future is a wrapper for a View_Sender_send_Params promised by a client call.
type View_Sender_send_Params_Future struct{ *capnp.Future }

func (p View_Sender_send_Params_Future) Struct() (View_Sender_send_Params, error) {
	s, err := p.Future.Struct()
	return View_Sender_send_Params(s), err
}

func (p View_Sender_send_Params_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_Selector capnp.Struct
type View_Selector_Which uint16

const (
	View_Selector_Which_limit      View_Selector_Which = 0
	View_Selector_Which_upperBound View_Selector_Which = 1
	View_Selector_Which_lowerBound View_Selector_Which = 2
	View_Selector_Which_prefix     View_Selector_Which = 3
)

func (w View_Selector_Which) String() string {
	const s = "limitupperBoundlowerBoundprefix"
	switch w {
	case View_Selector_Which_limit:
		return s[0:5]
	case View_Selector_Which_upperBound:
		return s[5:15]
	case View_Selector_Which_lowerBound:
		return s[15:25]
	case View_Selector_Which_prefix:
		return s[25:31]

	}
	return "View_Selector_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Selector_TypeID is the unique identifier for the type View_Selector.
const View_Selector_TypeID = 0xf8eb7e44ba7b1fa8

func NewView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func NewRootView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func ReadRootView_Selector(msg *capnp.Message) (View_Selector, error) {
	root, err := msg.Root()
	return View_Selector(root.Struct()), err
}

func (s View_Selector) String() string {
	str, _ := text.Marshal(0xf8eb7e44ba7b1fa8, capnp.Struct(s))
	return str
}

func (s View_Selector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Selector) DecodeFromPtr(p capnp.Ptr) View_Selector {
	return View_Selector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Selector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Selector) Which() View_Selector_Which {
	return View_Selector_Which(capnp.Struct(s).Uint16(2))
}
func (s View_Selector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Selector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Selector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Selector) Limit() uint16 {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != limit")
	}
	return capnp.Struct(s).Uint16(0)
}

func (s View_Selector) SetLimit(v uint16) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, v)
}

func (s View_Selector) UpperBound() (View_Index, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != upperBound")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasUpperBound() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetUpperBound(v View_Index) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUpperBound sets the upperBound field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewUpperBound() (View_Index, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_Selector) LowerBound() (View_Index, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != lowerBound")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasLowerBound() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetLowerBound(v View_Index) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLowerBound sets the lowerBound field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewLowerBound() (View_Index, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_Selector) Prefix() (View_Index, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != prefix")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasPrefix() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetPrefix(v View_Index) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPrefix sets the prefix field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewPrefix() (View_Index, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Selector_List is a list of View_Selector.
type View_Selector_List = capnp.StructList[View_Selector]

// NewView_Selector creates a new list of View_Selector.
func NewView_Selector_List(s *capnp.Segment, sz int32) (View_Selector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Selector](l), err
}

// View_Selector_Future is a wrapper for a View_Selector promised by a client call.
type View_Selector_Future struct{ *capnp.Future }

func (p View_Selector_Future) Struct() (View_Selector, error) {
	s, err := p.Future.Struct()
	return View_Selector(s), err
}

func (p View_Selector_Future) UpperBound() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

func (p View_Selector_Future) LowerBound() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

func (p View_Selector_Future) Prefix() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Index capnp.Struct
type View_Index_Which uint16

const (
	View_Index_Which_peer     View_Index_Which = 0
	View_Index_Which_hostname View_Index_Which = 1
	View_Index_Which_meta     View_Index_Which = 2
)

func (w View_Index_Which) String() string {
	const s = "peerhostnamemeta"
	switch w {
	case View_Index_Which_peer:
		return s[0:4]
	case View_Index_Which_hostname:
		return s[4:12]
	case View_Index_Which_meta:
		return s[12:16]

	}
	return "View_Index_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Index_TypeID is the unique identifier for the type View_Index.
const View_Index_TypeID = 0xdb1aee7a06a493b6

func NewView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func NewRootView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func ReadRootView_Index(msg *capnp.Message) (View_Index, error) {
	root, err := msg.Root()
	return View_Index(root.Struct()), err
}

func (s View_Index) String() string {
	str, _ := text.Marshal(0xdb1aee7a06a493b6, capnp.Struct(s))
	return str
}

func (s View_Index) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Index) DecodeFromPtr(p capnp.Ptr) View_Index {
	return View_Index(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Index) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Index) Which() View_Index_Which {
	return View_Index_Which(capnp.Struct(s).Uint16(0))
}
func (s View_Index) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Index) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Index) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Index) Peer() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != peer")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasPeer() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetPeer(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Hostname() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != hostname")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasHostname() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) HostnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetHostname(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Meta() (string, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != meta")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasMeta() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) MetaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetMeta(v string) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetText(0, v)
}

// View_Index_List is a list of View_Index.
type View_Index_List = capnp.StructList[View_Index]

// NewView_Index creates a new list of View_Index.
func NewView_Index_List(s *capnp.Segment, sz int32) (View_Index_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Index](l), err
}

// View_Index_Future is a wrapper for a View_Index promised by a client call.
type View_Index_Future struct{ *capnp.Future }

func (p View_Index_Future) Struct() (View_Index, error) {
	s, err := p.Future.Struct()
	return View_Index(s), err
}

type View_Record capnp.Struct

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xc390eec5b4e4aaef

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_Record(st), err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_Record(st), err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record(root.Struct()), err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xc390eec5b4e4aaef, capnp.Struct(s))
	return str
}

func (s View_Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Record) DecodeFromPtr(p capnp.Ptr) View_Record {
	return View_Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Record) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Record) Heartbeat() (Heartbeat, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Heartbeat(p.Struct()), err
}

func (s View_Record) HasHeartbeat() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_Record) SetHeartbeat(v Heartbeat) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated Heartbeat struct, preferring placement in s's segment.
func (s View_Record) NewHeartbeat() (Heartbeat, error) {
	ss, err := NewHeartbeat(capnp.Struct(s).Segment())
	if err != nil {
		return Heartbeat{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Record_List is a list of View_Record.
type View_Record_List = capnp.StructList[View_Record]

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[View_Record](l), err
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record(s), err
}

func (p View_Record_Future) Heartbeat() Heartbeat_Future {
	return Heartbeat_Future{Future: p.Future.Field(1, nil)}
}

type View_MaybeRecord capnp.Struct
type View_MaybeRecord_Which uint16

const (
	View_MaybeRecord_Which_nothing View_MaybeRecord_Which = 0
	View_MaybeRecord_Which_just    View_MaybeRecord_Which = 1
)

func (w View_MaybeRecord_Which) String() string {
	const s = "nothingjust"
	switch w {
	case View_MaybeRecord_Which_nothing:
		return s[0:7]
	case View_MaybeRecord_Which_just:
		return s[7:11]

	}
	return "View_MaybeRecord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_MaybeRecord_TypeID is the unique identifier for the type View_MaybeRecord.
const View_MaybeRecord_TypeID = 0xf107ba55f0ab3244

func NewView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func NewRootView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func ReadRootView_MaybeRecord(msg *capnp.Message) (View_MaybeRecord, error) {
	root, err := msg.Root()
	return View_MaybeRecord(root.Struct()), err
}

func (s View_MaybeRecord) String() string {
	str, _ := text.Marshal(0xf107ba55f0ab3244, capnp.Struct(s))
	return str
}

func (s View_MaybeRecord) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_MaybeRecord) DecodeFromPtr(p capnp.Ptr) View_MaybeRecord {
	return View_MaybeRecord(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_MaybeRecord) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_MaybeRecord) Which() View_MaybeRecord_Which {
	return View_MaybeRecord_Which(capnp.Struct(s).Uint16(0))
}
func (s View_MaybeRecord) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_MaybeRecord) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_MaybeRecord) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_MaybeRecord) SetNothing() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_MaybeRecord) Just() (View_Record, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != just")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_MaybeRecord) HasJust() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_MaybeRecord) SetJust(v View_Record) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJust sets the just field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_MaybeRecord) NewJust() (View_Record, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_MaybeRecord_List is a list of View_MaybeRecord.
type View_MaybeRecord_List = capnp.StructList[View_MaybeRecord]

// NewView_MaybeRecord creates a new list of View_MaybeRecord.
func NewView_MaybeRecord_List(s *capnp.Segment, sz int32) (View_MaybeRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_MaybeRecord](l), err
}

// View_MaybeRecord_Future is a wrapper for a View_MaybeRecord promised by a client call.
type View_MaybeRecord_Future struct{ *capnp.Future }

func (p View_MaybeRecord_Future) Struct() (View_MaybeRecord, error) {
	s, err := p.Future.Struct()
	return View_MaybeRecord(s), err
}

func (p View_MaybeRecord_Future) Just() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_first_Params capnp.Struct

// View_first_Params_TypeID is the unique identifier for the type View_first_Params.
const View_first_Params_TypeID = 0xb06e55bb4d9bb7e2

func NewView_first_Params(s *capnp.Segment) (View_first_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_first_Params(st), err
}

func NewRootView_first_Params(s *capnp.Segment) (View_first_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_first_Params(st), err
}

func ReadRootView_first_Params(msg *capnp.Message) (View_first_Params, error) {
	root, err := msg.Root()
	return View_first_Params(root.Struct()), err
}

func (s View_first_Params) String() string {
	str, _ := text.Marshal(0xb06e55bb4d9bb7e2, capnp.Struct(s))
	return str
}

func (s View_first_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_first_Params) DecodeFromPtr(p capnp.Ptr) View_first_Params {
	return View_first_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_first_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_first_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_first_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_first_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_first_Params_List is a list of View_first_Params.
type View_first_Params_List = capnp.StructList[View_first_Params]

// NewView_first_Params creates a new list of View_first_Params.
func NewView_first_Params_List(s *capnp.Segment, sz int32) (View_first_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_first_Params](l), err
}

// View_first_Params_Future is a wrapper for a View_first_Params promised by a client call.
type View_first_Params_Future struct{ *capnp.Future }

func (p View_first_Params_Future) Struct() (View_first_Params, error) {
	s, err := p.Future.Struct()
	return View_first_Params(s), err
}

type View_first_Results capnp.Struct

// View_first_Results_TypeID is the unique identifier for the type View_first_Results.
const View_first_Results_TypeID = 0x9bbf333a5450f2d0

func NewView_first_Results(s *capnp.Segment) (View_first_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_first_Results(st), err
}

func NewRootView_first_Results(s *capnp.Segment) (View_first_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_first_Results(st), err
}

func ReadRootView_first_Results(msg *capnp.Message) (View_first_Results, error) {
	root, err := msg.Root()
	return View_first_Results(root.Struct()), err
}

func (s View_first_Results) String() string {
	str, _ := text.Marshal(0x9bbf333a5450f2d0, capnp.Struct(s))
	return str
}

func (s View_first_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_first_Results) DecodeFromPtr(p capnp.Ptr) View_first_Results {
	return View_first_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_first_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_first_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_first_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_first_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_first_Results) Result() (View_MaybeRecord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_MaybeRecord(p.Struct()), err
}

func (s View_first_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_first_Results) SetResult(v View_MaybeRecord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated View_MaybeRecord struct, preferring placement in s's segment.
func (s View_first_Results) NewResult() (View_MaybeRecord, error) {
	ss, err := NewView_MaybeRecord(capnp.Struct(s).Segment())
	if err != nil {
		return View_MaybeRecord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_first_Results_List is a list of View_first_Results.
type View_first_Results_List = capnp.StructList[View_first_Results]

// NewView_first_Results creates a new list of View_first_Results.
func NewView_first_Results_List(s *capnp.Segment, sz int32) (View_first_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_first_Results](l), err
}

// View_first_Results_Future is a wrapper for a View_first_Results promised by a client call.
type View_first_Results_Future struct{ *capnp.Future }

func (p View_first_Results_Future) Struct() (View_first_Results, error) {
	s, err := p.Future.Struct()
	return View_first_Results(s), err
}

func (p View_first_Results_Future) Result() View_MaybeRecord_Future {
	return View_MaybeRecord_Future{Future: p.Future.Field(0, nil)}
}

type View_last_Params capnp.Struct

// View_last_Params_TypeID is the unique identifier for the type View_last_Params.
const View_last_Params_TypeID = 0x8b8f9a8dbc645c7a

func NewView_last_Params(s *capnp.Segment) (View_last_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_last_Params(st), err
}

func NewRootView_last_Params(s *capnp.Segment) (View_last_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_last_Params(st), err
}

func ReadRootView_last_Params(msg *capnp.Message) (View_last_Params, error) {
	root, err := msg.Root()
	return View_last_Params(root.Struct()), err
}

func (s View_last_Params) String() string {
	str, _ := text.Marshal(0x8b8f9a8dbc645c7a, capnp.Struct(s))
	return str
}

func (s View_last_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_last_Params) DecodeFromPtr(p capnp.Ptr) View_last_Params {
	return View_last_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_last_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_last_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_last_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_last_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_last_Params_List is a list of View_last_Params.
type View_last_Params_List = capnp.StructList[View_last_Params]

// NewView_last_Params creates a new list of View_last_Params.
func NewView_last_Params_List(s *capnp.Segment, sz int32) (View_last_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_last_Params](l), err
}

// View_last_Params_Future is a wrapper for a View_last_Params promised by a client call.
type View_last_Params_Future struct{ *capnp.Future }

func (p View_last_Params_Future) Struct() (View_last_Params, error) {
	s, err := p.Future.Struct()
	return View_last_Params(s), err
}

type View_last_Results capnp.Struct

// View_last_Results_TypeID is the unique identifier for the type View_last_Results.
const View_last_Results_TypeID = 0x9764ff97950b0e11

func NewView_last_Results(s *capnp.Segment) (View_last_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_last_Results(st), err
}

func NewRootView_last_Results(s *capnp.Segment) (View_last_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_last_Results(st), err
}

func ReadRootView_last_Results(msg *capnp.Message) (View_last_Results, error) {
	root, err := msg.Root()
	return View_last_Results(root.Struct()), err
}

func (s View_last_Results) String() string {
	str, _ := text.Marshal(0x9764ff97950b0e11, capnp.Struct(s))
	return str
}

func (s View_last_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_last_Results) DecodeFromPtr(p capnp.Ptr) View_last_Results {
	return View_last_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_last_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_last_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_last_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_last_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_last_Results) Result() (View_MaybeRecord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_MaybeRecord(p.Struct()), err
}

func (s View_last_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_last_Results) SetResult(v View_MaybeRecord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated View_MaybeRecord struct, preferring placement in s's segment.
func (s View_last_Results) NewResult() (View_MaybeRecord, error) {
	ss, err := NewView_MaybeRecord(capnp.Struct(s).Segment())
	if err != nil {
		return View_MaybeRecord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_last_Results_List is a list of View_last_Results.
type View_last_Results_List = capnp.StructList[View_last_Results]

// NewView_last_Results creates a new list of View_last_Results.
func NewView_last_Results_List(s *capnp.Segment, sz int32) (View_last_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_last_Results](l), err
}

// View_last_Results_Future is a wrapper for a View_last_Results promised by a client call.
type View_last_Results_Future struct{ *capnp.Future }

func (p View_last_Results_Future) Struct() (View_last_Results, error) {
	s, err := p.Future.Struct()
	return View_last_Results(s), err
}

func (p View_last_Results_Future) Result() View_MaybeRecord_Future {
	return View_MaybeRecord_Future{Future: p.Future.Field(0, nil)}
}

type View_prefix_Params capnp.Struct

// View_prefix_Params_TypeID is the unique identifier for the type View_prefix_Params.
const View_prefix_Params_TypeID = 0x81107838ed1339e2

func NewView_prefix_Params(s *capnp.Segment) (View_prefix_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_prefix_Params(st), err
}

func NewRootView_prefix_Params(s *capnp.Segment) (View_prefix_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_prefix_Params(st), err
}

func ReadRootView_prefix_Params(msg *capnp.Message) (View_prefix_Params, error) {
	root, err := msg.Root()
	return View_prefix_Params(root.Struct()), err
}

func (s View_prefix_Params) String() string {
	str, _ := text.Marshal(0x81107838ed1339e2, capnp.Struct(s))
	return str
}

func (s View_prefix_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_prefix_Params) DecodeFromPtr(p capnp.Ptr) View_prefix_Params {
	return View_prefix_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_prefix_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_prefix_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_prefix_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_prefix_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_prefix_Params) Index() (View_Index, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_prefix_Params) HasIndex() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_prefix_Params) SetIndex(v View_Index) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIndex sets the index field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_prefix_Params) NewIndex() (View_Index, error) {
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_prefix_Params_List is a list of View_prefix_Params.
type View_prefix_Params_List = capnp.StructList[View_prefix_Params]

// NewView_prefix_Params creates a new list of View_prefix_Params.
func NewView_prefix_Params_List(s *capnp.Segment, sz int32) (View_prefix_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_prefix_Params](l), err
}

// View_prefix_Params_Future is a wrapper for a View_prefix_Params promised by a client call.
type View_prefix_Params_Future struct{ *capnp.Future }

func (p View_prefix_Params_Future) Struct() (View_prefix_Params, error) {
	s, err := p.Future.Struct()
	return View_prefix_Params(s), err
}

func (p View_prefix_Params_Future) Index() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_prefix_Results capnp.Struct

// View_prefix_Results_TypeID is the unique identifier for the type View_prefix_Results.
const View_prefix_Results_TypeID = 0xb999cf53764e76ae

func NewView_prefix_Results(s *capnp.Segment) (View_prefix_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_prefix_Results(st), err
}

func NewRootView_prefix_Results(s *capnp.Segment) (View_prefix_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_prefix_Results(st), err
}

func ReadRootView_prefix_Results(msg *capnp.Message) (View_prefix_Results, error) {
	root, err := msg.Root()
	return View_prefix_Results(root.Struct()), err
}

func (s View_prefix_Results) String() string {
	str, _ := text.Marshal(0xb999cf53764e76ae, capnp.Struct(s))
	return str
}

func (s View_prefix_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_prefix_Results) DecodeFromPtr(p capnp.Ptr) View_prefix_Results {
	return View_prefix_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_prefix_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_prefix_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_prefix_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_prefix_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_prefix_Results) Result() (View_MaybeRecord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_MaybeRecord(p.Struct()), err
}

func (s View_prefix_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_prefix_Results) SetResult(v View_MaybeRecord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated View_MaybeRecord struct, preferring placement in s's segment.
func (s View_prefix_Results) NewResult() (View_MaybeRecord, error) {
	ss, err := NewView_MaybeRecord(capnp.Struct(s).Segment())
	if err != nil {
		return View_MaybeRecord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_prefix_Results_List is a list of View_prefix_Results.
type View_prefix_Results_List = capnp.StructList[View_prefix_Results]

// NewView_prefix_Results creates a new list of View_prefix_Results.
func NewView_prefix_Results_List(s *capnp.Segment, sz int32) (View_prefix_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_prefix_Results](l), err
}

// View_prefix_Results_Future is a wrapper for a View_prefix_Results promised by a client call.
type View_prefix_Results_Future struct{ *capnp.Future }

func (p View_prefix_Results_Future) Struct() (View_prefix_Results, error) {
	s, err := p.Future.Struct()
	return View_prefix_Results(s), err
}

func (p View_prefix_Results_Future) Result() View_MaybeRecord_Future {
	return View_MaybeRecord_Future{Future: p.Future.Field(0, nil)}
}

type View_iter_Params capnp.Struct

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xa4d3fccf1865492f

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params(st), err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params(st), err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params(root.Struct()), err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xa4d3fccf1865492f, capnp.Struct(s))
	return str
}

func (s View_iter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Params) DecodeFromPtr(p capnp.Ptr) View_iter_Params {
	return View_iter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_iter_Params) Handler() View_Sender {
	p, _ := capnp.Struct(s).Ptr(0)
	return View_Sender(p.Interface().Client())
}

func (s View_iter_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Sender) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List = capnp.StructList[View_iter_Params]

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_iter_Params](l), err
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params(s), err
}

func (p View_iter_Params_Future) Handler() View_Sender {
	return View_Sender(p.Future.Field(0, nil).Client())
}

type View_iter_Results capnp.Struct

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xdded13ef49037d77

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results(root.Struct()), err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xdded13ef49037d77, capnp.Struct(s))
	return str
}

func (s View_iter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Results) DecodeFromPtr(p capnp.Ptr) View_iter_Results {
	return View_iter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List = capnp.StructList[View_iter_Results]

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_iter_Results](l), err
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results(s), err
}

type View_reverse_Params capnp.Struct

// View_reverse_Params_TypeID is the unique identifier for the type View_reverse_Params.
const View_reverse_Params_TypeID = 0xc64163a99fc5f31f

func NewView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func NewRootView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func ReadRootView_reverse_Params(msg *capnp.Message) (View_reverse_Params, error) {
	root, err := msg.Root()
	return View_reverse_Params(root.Struct()), err
}

func (s View_reverse_Params) String() string {
	str, _ := text.Marshal(0xc64163a99fc5f31f, capnp.Struct(s))
	return str
}

func (s View_reverse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Params) DecodeFromPtr(p capnp.Ptr) View_reverse_Params {
	return View_reverse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_reverse_Params_List is a list of View_reverse_Params.
type View_reverse_Params_List = capnp.StructList[View_reverse_Params]

// NewView_reverse_Params creates a new list of View_reverse_Params.
func NewView_reverse_Params_List(s *capnp.Segment, sz int32) (View_reverse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_reverse_Params](l), err
}

// View_reverse_Params_Future is a wrapper for a View_reverse_Params promised by a client call.
type View_reverse_Params_Future struct{ *capnp.Future }

func (p View_reverse_Params_Future) Struct() (View_reverse_Params, error) {
	s, err := p.Future.Struct()
	return View_reverse_Params(s), err
}

type View_reverse_Results capnp.Struct

// View_reverse_Results_TypeID is the unique identifier for the type View_reverse_Results.
const View_reverse_Results_TypeID = 0x94196be1d5ca0919

func NewView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func NewRootView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func ReadRootView_reverse_Results(msg *capnp.Message) (View_reverse_Results, error) {
	root, err := msg.Root()
	return View_reverse_Results(root.Struct()), err
}

func (s View_reverse_Results) String() string {
	str, _ := text.Marshal(0x94196be1d5ca0919, capnp.Struct(s))
	return str
}

func (s View_reverse_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Results) DecodeFromPtr(p capnp.Ptr) View_reverse_Results {
	return View_reverse_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_reverse_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s View_reverse_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_reverse_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// View_reverse_Results_List is a list of View_reverse_Results.
type View_reverse_Results_List = capnp.StructList[View_reverse_Results]

// NewView_reverse_Results creates a new list of View_reverse_Results.
func NewView_reverse_Results_List(s *capnp.Segment, sz int32) (View_reverse_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_reverse_Results](l), err
}

// View_reverse_Results_Future is a wrapper for a View_reverse_Results promised by a client call.
type View_reverse_Results_Future struct{ *capnp.Future }

func (p View_reverse_Results_Future) Struct() (View_reverse_Results, error) {
	s, err := p.Future.Struct()
	return View_reverse_Results(s), err
}

func (p View_reverse_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

type View_filter_Params capnp.Struct

// View_filter_Params_TypeID is the unique identifier for the type View_filter_Params.
const View_filter_Params_TypeID = 0xa2d7a4da5fdfb1d1

func NewView_filter_Params(s *capnp.Segment) (View_filter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_filter_Params(st), err
}

func NewRootView_filter_Params(s *capnp.Segment) (View_filter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_filter_Params(st), err
}

func ReadRootView_filter_Params(msg *capnp.Message) (View_filter_Params, error) {
	root, err := msg.Root()
	return View_filter_Params(root.Struct()), err
}

func (s View_filter_Params) String() string {
	str, _ := text.Marshal(0xa2d7a4da5fdfb1d1, capnp.Struct(s))
	return str
}

func (s View_filter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_filter_Params) DecodeFromPtr(p capnp.Ptr) View_filter_Params {
	return View_filter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_filter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_filter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_filter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_filter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_filter_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Selector(p.Struct()), err
}

func (s View_filter_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_filter_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_filter_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_filter_Params_List is a list of View_filter_Params.
type View_filter_Params_List = capnp.StructList[View_filter_Params]

// NewView_filter_Params creates a new list of View_filter_Params.
func NewView_filter_Params_List(s *capnp.Segment, sz int32) (View_filter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_filter_Params](l), err
}

// View_filter_Params_Future is a wrapper for a View_filter_Params promised by a client call.
type View_filter_Params_Future struct{ *capnp.Future }

func (p View_filter_Params_Future) Struct() (View_filter_Params, error) {
	s, err := p.Future.Struct()
	return View_filter_Params(s), err
}

func (p View_filter_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(0, nil)}
}

type View_filter_Results capnp.Struct

// View_filter_Results_TypeID is the unique identifier for the type View_filter_Results.
const View_filter_Results_TypeID = 0xf85c68584d5e82f6

func NewView_filter_Results(s *capnp.Segment) (View_filter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_filter_Results(st), err
}

func NewRootView_filter_Results(s *capnp.Segment) (View_filter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_filter_Results(st), err
}

func ReadRootView_filter_Results(msg *capnp.Message) (View_filter_Results, error) {
	root, err := msg.Root()
	return View_filter_Results(root.Struct()), err
}

func (s View_filter_Results) String() string {
	str, _ := text.Marshal(0xf85c68584d5e82f6, capnp.Struct(s))
	return str
}

func (s View_filter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_filter_Results) DecodeFromPtr(p capnp.Ptr) View_filter_Results {
	return View_filter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_filter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_filter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_filter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_filter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_filter_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s View_filter_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_filter_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// View_filter_Results_List is a list of View_filter_Results.
type View_filter_Results_List = capnp.StructList[View_filter_Results]

// NewView_filter_Results creates a new list of View_filter_Results.
func NewView_filter_Results_List(s *capnp.Segment, sz int32) (View_filter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_filter_Results](l), err
}

// View_filter_Results_Future is a wrapper for a View_filter_Results promised by a client call.
type View_filter_Results_Future struct{ *capnp.Future }

func (p View_filter_Results_Future) Struct() (View_filter_Results, error) {
	s, err := p.Future.Struct()
	return View_filter_Results(s), err
}

func (p View_filter_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

const schema_c2974e3dc137fcee = "x\xda\xacV}\x88TU\x14?\xe7\xde7\xef\xcd\xe4" +
	"~]\xdf\x0a\xae\"\x83\xb1A+i\xba\x1b\xa4\x032" +
	"\xd3\xa2\xe4\x8a\xca\xde\xd5-\x15M\xc6\x99\xab35\xfb" +
	"fx\xef\xcd\xcej\xd9\xa6\xfd\xd1\x1f%\x05)\xa2\"" +
	"E\x18Y\xd1\xc7F_\x9aR\x1a\x1b(\x81i\x94P" +
	"\x88\xac\x18\x12\xa1\xf6\x01!b\xbd\xb8o\xe6\xcd{\xbb" +
	"3.\x14\xfd7\xbc{\xf6w~\xe7w\xce\xf9\x9d\x9d" +
	"o\xd1\x84\xb2\xa0\xf1\x8d\x08\x10^\x08\xa9\xce\xe5E\xfa" +
	"\xb5\x85C-;\x81\xe9\x08\x10B\x0d\xa0\xeb\xa8r\x17" +
	"\x02\xea'\x958\xa0\xb3\xab\xa9\xe9\xc2\x95W\x8f?\x0b" +
	"\xbc\x09\xd1\xb9~\xfb\xc1\x93\x8bW\xed;\x05!\xa2\x01" +
	"\xe8c\xca)\xfdgE\xfe\xfaI\xb9\x0a\xe8l\xdf\x90" +
	">\xbe\xfb\xc0\x8b\xcf\x97\xd1\xdc\x87s\xa1[\xa08m" +
	"\x913\xdf\x8d=\xd1\xb6'\x98\xe6\xa3\xd0\x0c\x99\xe6D" +
	"H\xa6aMS\xf6\xees\xd2\xfb\x82\x01\x17CD\x06" +
	"\x8c\xb9\x01\xdf\xfc\xde\xbb&\xd6\xf5\xf9\xc1`\x00\xaa." +
	"\xd1\x88*\x03\xce\x8d\\\xda\xf4\xc3\xe1\x0b\xaf\x05\x03:" +
	"\xca\x01\x0b\xdc\x80\xfb{\xc4\xf4\xb3\xb7\xbf=\x1c\x08\xd0" +
	"\xfb\xd5[\x80\xfa:\xf7\xfd\xf2'\x07W~\xd6o\xbc" +
	"\xef\x93\xef\xda\xa6\x12\x04\xc5Y<tv\x0f9\xfa\xfd" +
	"\x07\xc0t\xea\x9c\xbft\xe8\xc8\x94\x99_\x7f\x0a\x80\xfa" +
	"F\xf5\xbc\x9eU%\x90P\x1f\xd6w\xcb_\xfe;k" +
	"\xa2\xbe^\x80zQ=\xa0\xefP\x1f\x05\xe8:\xa1>" +
	"\x87\xfa;\x9a\x8c~wp\xd5\xe0\xea\xb3\xfb\x8f\x06Y" +
	"\xef\xd5\xa6J\xd6\x874\xc9\xea\xc6[W>\x1c\xbd\xfe" +
	"\xd2\x972\xc0\xc7.\xcb\x7fB;\xaf\x9f\x960\xfa\xa8" +
	"V\x02t\xa2\x7f\x8c\xbe\xf2f\xea\xa1\xaf\x02\x15\xdc\x13" +
	"\x9e*+\xf8\xf8\xe5\xc3\xea\xf6\xeb3~\x04\xaec\x00" +
	"f)j\x14@o\x0c\x9f\xd1\xdb\xc2\x12gZ\xf8=" +
	"@\xa7\xb4\x83\xf6\xdc\xd0\xaf]\x0c\xe0\x8c\x84]%f" +
	"\x0eg\x06\x9f\xd95u\x0c\xd8\x0c\x9fn\xb8\xd3\xa5\x1b" +
	"\x96t\x97t\xbe\xfdk\xff1\xed\xb7\xdaDD\x12\x0e" +
	"\xdf\xd2O\xbb\x89F\xc3\x92\xf0\x9f\xbb\x1e[\xb96\xb3" +
	"\xe1f\xb0\xfa\xd9\x11\xb7\xfa\x8e\x88\x84;\x12}\xf2\xd8" +
	"\x92\xa7\x7f\xb9Y\x0b\xa7 \xea=\x91\xcbz\x7fD\xc2" +
	"\xf1\xc8UX\xe7\x98\xf9\xa2\x9d5\xb6\xce\xa3\xa9d\xc1" +
	"(\xc4\x1e\xc9\x8a\xd2\xbc\x82)\xb6d\x87\xda{\x93f" +
	"r\xc0\x02\xe0\x0aU\x00\x14\x04`\x8d\x9d\x00<L\x91" +
	"\xb7\x12\x8cf\x8d\xb4\x18\xc2\x16_(@l\x01\xacB" +
	"\x922\xe42\x914\xed\xcd\"iC/\"o\xa9b" +
	"%\xef\x06\xe0\x1b(\xf2\x0cA\x86\xd8\x8a\xf2\xa3X\x0e" +
	"\xc0\xd3\x14y\x81 \x92V$\x00l@~\xcbQ\xe4" +
	"C\x04\x19\xc5V\xa4\x00\xac8\x07\x80\x17(\xf2\x17\x08" +
	"j\xb6\x9d\xc30\x10\x0c\x03:Y\xc3\xb2\x93FJ\x00" +
	"@\xf5[&o\xd9Fr\xc0\xfd\xd6\x00\x04\x1b\x00\x9b" +
	"\x07\x84\x9d\xc4&\xc0^\x8a\xee\xb7\xa6Z\xe6\xae\x18\xb9" +
	"\xa4e\xb7\xc7\xcbZ\xd4U\xcb\x14\x83\xc2\xb4D{\x9f" +
	"\xb0\x8a9j[A\xb9\xe6\xf8r5\x0ffE\x09Y" +
	"p\x17\x90\x05r\xd2\x899]<\xdb\x1a'\x7f\xcc\xc7" +
	"\x8b\x9b\xee;\xb6\xf8\xf33A\xff \xe2\x96\xac\x19\x80" +
	"\xfc\xbf0s\xb60\xeb\x8e\x89\xecX\x03E>\x9d\xa0" +
	"c\x89\x9cH\xd9yS\x8a\xdf\xe2Og\xfdaq\x81" +
	"\xb3\x12\xb6\"y\x10\xb5\xdbg:\x9cI\x1a\xe9\x9c0" +
	"\x91\xf9N3AP\xb5\xa6\xfc\x0aS/ \xf0\xbeZ" +
	"\x18i\x81\xa6\x1cP\x85\x86\x00\xaaK\x8b\xc6\xc8\x17\xa5" +
	"\xae\x03\x9b\xf636\x07\x08\x0bi\xcd\x960\xd2\x09\xec" +
	"E?\x11z@T\x94x+b\xc0\xfbf\xc7\xfc\x82" +
	"\xd9\xac\xe5\xfe\xaa\xb0Y\x9d\x01\x9bj\x8b\xf9\x82\xb3i" +
	"\x9b\xe3.\x1d\xd3Y\xed+\x17\xed\x91\xcb\x16\xef\x13\xa9" +
	"\xbc\x99vV&\xb7m\x16}\"\x05Z\xdeL\xf3\xe9" +
	".c\xcf\x8a\xd1s}6\xd2\x09\x84\xbd\xae\xa1\x7fc" +
	"\xd0;\x19l\xbf\xacf\xb7\x86\xa4z\xcd\xd0\xb3U\xb6" +
	"3\x06\x84\x155\xa4U\xfbG\xcf\xddXV\xfe\xddF" +
	"\x0d\x95\xaaq\xa2w\xa7\x18\xef\x06\xc2\x96j\x18\xaa\xde" +
	"\x15\xf4\xcc\x8a-\x92\x98s\xb5\xa8\xdb\x88\x046\xcb\x09" +
	"O`\xbc\xec4\x09l\x96-O\xe0pe\x97\x12\x18" +
	"/\x0f\xd7x\xa1\xebxTy\xa2\xd1\xfa\xcf\x03\x1d\x9c" +
	";W]L\xcb)\x08W\xe1:\xe4\x0e\xb7S\xe4\xf3" +
	"\x0365\xb7\x0f\x80\xdfG\x91/$\xd8\\\x10\xc2\xf4" +
	"l\xc5\xc9T\xdc\x0ePf\xad\xfe'0\xc9\x1ay\xfe" +
	"\xe1N'Zu\x99\xb9\xdd\x07\xd7@\x1b\xa8\xd2\xe08" +
	".\xb5\xa5\x92Z\x82\"_A\xb0\x11\xffv\xca\xdcz" +
	"\xe4\xf2-\xa3\xc8\xd7\x10l$\x7f9e\x13\xe52v" +
	"\x05E\xbe\xb6\x86\xf1\x9d\xcc\xd1\x0b\xf0\x08i\x13W\xd4" +
	"\xb3\x93;-\x949O.K{o\xb4f\x93\xc7\xb7" +
	"H\xce4\xb6\xf8\xfb0I\x8b\xdc\xc9\xaf\xacA\xa5O" +
	"\x9e\x1a\x1d\xdd~\xa3|5\xe6\xca\xba\xef\xa5\xc8\x1f " +
	"8l\xe4\xedL\xd6\xd8\x0aj\xf3\xe3E\xcb\x9e$e" +
	"\x1d\x9b\xab7i\xff\xc2\xde\xc98qr\"\xa5\xd9y" +
	"\xb3r\x10\xbd\x0a\x92\x9d\xfeE\xf4+\x10\xeb\xfd\x93\xe8" +
	"\xf7s`\xbd\x7f\x14\x1b\xe9m\xa7r\x15c\x95\xab\xf8" +
	"\x14\xc1h.;\x90\xb5Q\x03\x82\x1a\xa0S,\x14\x84" +
	"\xd9\x9d/\x025\xd2u\x8ev._\x9a\xe4\xb9\xb2\xa8" +
	"\xb5\x0f\xff\x04\x00\x00\xff\xff\x81.(\x15"

func init() {
	schemas.Register(schema_c2974e3dc137fcee,
		0x81107838ed1339e2,
		0x83bca0e4d70e0e82,
		0x8b8f9a8dbc645c7a,
		0x94196be1d5ca0919,
		0x9764ff97950b0e11,
		0x9bbf333a5450f2d0,
		0xa2d7a4da5fdfb1d1,
		0xa4d3fccf1865492f,
		0xb06e55bb4d9bb7e2,
		0xb2d6b90294cf783d,
		0xb8cc1b0ba89ddfd2,
		0xb999cf53764e76ae,
		0xc390eec5b4e4aaef,
		0xc64163a99fc5f31f,
		0xdb1aee7a06a493b6,
		0xdded13ef49037d77,
		0xe112828076687f1b,
		0xf107ba55f0ab3244,
		0xf85c68584d5e82f6,
		0xf8eb7e44ba7b1fa8)
}
