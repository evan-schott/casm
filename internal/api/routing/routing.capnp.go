// Code generated by capnpc-go. DO NOT EDIT.

package routing

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	fmt "fmt"
	strconv "strconv"
)

type Heartbeat capnp.Struct

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0x83bca0e4d70e0e82

func NewHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Heartbeat(st), err
}

func NewRootHeartbeat(s *capnp.Segment) (Heartbeat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Heartbeat(st), err
}

func ReadRootHeartbeat(msg *capnp.Message) (Heartbeat, error) {
	root, err := msg.Root()
	return Heartbeat(root.Struct()), err
}

func (s Heartbeat) String() string {
	str, _ := text.Marshal(0x83bca0e4d70e0e82, capnp.Struct(s))
	return str
}

func (s Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Heartbeat) DecodeFromPtr(p capnp.Ptr) Heartbeat {
	return Heartbeat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Heartbeat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Heartbeat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Heartbeat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Heartbeat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Heartbeat) Ttl() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Heartbeat) SetTtl(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Heartbeat) Server() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Heartbeat) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Heartbeat) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Heartbeat) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Heartbeat) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Heartbeat) SetHost(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Heartbeat) Meta() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Heartbeat) HasMeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Heartbeat) SetMeta(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Heartbeat) NewMeta(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Heartbeat_List is a list of Heartbeat.
type Heartbeat_List = capnp.StructList[Heartbeat]

// NewHeartbeat creates a new list of Heartbeat.
func NewHeartbeat_List(s *capnp.Segment, sz int32) (Heartbeat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Heartbeat](l), err
}

// Heartbeat_Future is a wrapper for a Heartbeat promised by a client call.
type Heartbeat_Future struct{ *capnp.Future }

func (p Heartbeat_Future) Struct() (Heartbeat, error) {
	s, err := p.Future.Struct()
	return Heartbeat(s), err
}

type View capnp.Client

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0xb8cc1b0ba89ddfd2

func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      0,
			InterfaceName: "routing.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}
func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      1,
			InterfaceName: "routing.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Reverse(ctx context.Context, params func(View_reverse_Params) error) (View_reverse_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      2,
			InterfaceName: "routing.capnp:View",
			MethodName:    "reverse",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_reverse_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return View_reverse_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View) AddRef() View {
	return View(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View) DecodeFromPtr(p capnp.Ptr) View {
	return View(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View) IsSame(other View) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A View_Server is a View with a local implementation.
type View_Server interface {
	Lookup(context.Context, View_lookup) error

	Iter(context.Context, View_iter) error

	Reverse(context.Context, View_reverse) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server) View {
	return View(capnp.NewClient(View_NewServer(s)))
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      0,
			InterfaceName: "routing.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      1,
			InterfaceName: "routing.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8cc1b0ba89ddfd2,
			MethodID:      2,
			InterfaceName: "routing.capnp:View",
			MethodName:    "reverse",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reverse(ctx, View_reverse{call})
		},
	})

	return methods
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(r), err
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(r), err
}

// View_reverse holds the state for a server call to View.reverse.
// See server.Call for documentation.
type View_reverse struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_reverse) Args() View_reverse_Params {
	return View_reverse_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_reverse) AllocResults() (View_reverse_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(r), err
}

// View_List is a list of View.
type View_List = capnp.CapList[View]

// NewView creates a new list of View.
func NewView_List(s *capnp.Segment, sz int32) (View_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View](l), err
}

type View_Handler capnp.Client

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0x9321a2d72dff5f08

func (c View_Handler) Recv(ctx context.Context, params func(View_Handler_recv_Params) error) (stream.StreamResult_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9321a2d72dff5f08,
			MethodID:      0,
			InterfaceName: "routing.capnp:View.Handler",
			MethodName:    "recv",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_recv_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return stream.StreamResult_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c View_Handler) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c View_Handler) AddRef() View_Handler {
	return View_Handler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c View_Handler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c View_Handler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c View_Handler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (View_Handler) DecodeFromPtr(p capnp.Ptr) View_Handler {
	return View_Handler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c View_Handler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c View_Handler) IsSame(other View_Handler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c View_Handler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c View_Handler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Recv(context.Context, View_Handler_recv) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server) View_Handler {
	return View_Handler(capnp.NewClient(View_Handler_NewServer(s)))
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9321a2d72dff5f08,
			MethodID:      0,
			InterfaceName: "routing.capnp:View.Handler",
			MethodName:    "recv",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Recv(ctx, View_Handler_recv{call})
		},
	})

	return methods
}

// View_Handler_recv holds the state for a server call to View_Handler.recv.
// See server.Call for documentation.
type View_Handler_recv struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_recv) Args() View_Handler_recv_Params {
	return View_Handler_recv_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c View_Handler_recv) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// View_Handler_List is a list of View_Handler.
type View_Handler_List = capnp.CapList[View_Handler]

// NewView_Handler creates a new list of View_Handler.
func NewView_Handler_List(s *capnp.Segment, sz int32) (View_Handler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[View_Handler](l), err
}

type View_Handler_recv_Params capnp.Struct

// View_Handler_recv_Params_TypeID is the unique identifier for the type View_Handler_recv_Params.
const View_Handler_recv_Params_TypeID = 0xf155c3664dada7ff

func NewView_Handler_recv_Params(s *capnp.Segment) (View_Handler_recv_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_recv_Params(st), err
}

func NewRootView_Handler_recv_Params(s *capnp.Segment) (View_Handler_recv_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_recv_Params(st), err
}

func ReadRootView_Handler_recv_Params(msg *capnp.Message) (View_Handler_recv_Params, error) {
	root, err := msg.Root()
	return View_Handler_recv_Params(root.Struct()), err
}

func (s View_Handler_recv_Params) String() string {
	str, _ := text.Marshal(0xf155c3664dada7ff, capnp.Struct(s))
	return str
}

func (s View_Handler_recv_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Handler_recv_Params) DecodeFromPtr(p capnp.Ptr) View_Handler_recv_Params {
	return View_Handler_recv_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Handler_recv_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Handler_recv_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Handler_recv_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Handler_recv_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Handler_recv_Params) Record() (View_Record, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_Handler_recv_Params) HasRecord() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Handler_recv_Params) SetRecord(v View_Record) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_Handler_recv_Params) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Handler_recv_Params_List is a list of View_Handler_recv_Params.
type View_Handler_recv_Params_List = capnp.StructList[View_Handler_recv_Params]

// NewView_Handler_recv_Params creates a new list of View_Handler_recv_Params.
func NewView_Handler_recv_Params_List(s *capnp.Segment, sz int32) (View_Handler_recv_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_Handler_recv_Params](l), err
}

// View_Handler_recv_Params_Future is a wrapper for a View_Handler_recv_Params promised by a client call.
type View_Handler_recv_Params_Future struct{ *capnp.Future }

func (p View_Handler_recv_Params_Future) Struct() (View_Handler_recv_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_recv_Params(s), err
}

func (p View_Handler_recv_Params_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_Selector capnp.Struct
type View_Selector_Which uint16

const (
	View_Selector_Which_all   View_Selector_Which = 0
	View_Selector_Which_match View_Selector_Which = 1
	View_Selector_Which_from  View_Selector_Which = 2
)

func (w View_Selector_Which) String() string {
	const s = "allmatchfrom"
	switch w {
	case View_Selector_Which_all:
		return s[0:3]
	case View_Selector_Which_match:
		return s[3:8]
	case View_Selector_Which_from:
		return s[8:12]

	}
	return "View_Selector_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Selector_TypeID is the unique identifier for the type View_Selector.
const View_Selector_TypeID = 0xf8eb7e44ba7b1fa8

func NewView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func NewRootView_Selector(s *capnp.Segment) (View_Selector, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Selector(st), err
}

func ReadRootView_Selector(msg *capnp.Message) (View_Selector, error) {
	root, err := msg.Root()
	return View_Selector(root.Struct()), err
}

func (s View_Selector) String() string {
	str, _ := text.Marshal(0xf8eb7e44ba7b1fa8, capnp.Struct(s))
	return str
}

func (s View_Selector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Selector) DecodeFromPtr(p capnp.Ptr) View_Selector {
	return View_Selector(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Selector) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Selector) Which() View_Selector_Which {
	return View_Selector_Which(capnp.Struct(s).Uint16(0))
}
func (s View_Selector) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Selector) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Selector) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Selector) SetAll() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_Selector) Match() (View_Index, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != match")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasMatch() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetMatch(v View_Index) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMatch sets the match field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewMatch() (View_Index, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_Selector) From() (View_Index, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != from")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Selector) HasFrom() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Selector) SetFrom(v View_Index) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrom sets the from field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Selector) NewFrom() (View_Index, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Selector_List is a list of View_Selector.
type View_Selector_List = capnp.StructList[View_Selector]

// NewView_Selector creates a new list of View_Selector.
func NewView_Selector_List(s *capnp.Segment, sz int32) (View_Selector_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Selector](l), err
}

// View_Selector_Future is a wrapper for a View_Selector promised by a client call.
type View_Selector_Future struct{ *capnp.Future }

func (p View_Selector_Future) Struct() (View_Selector, error) {
	s, err := p.Future.Struct()
	return View_Selector(s), err
}

func (p View_Selector_Future) Match() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

func (p View_Selector_Future) From() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Constraint capnp.Struct
type View_Constraint_Which uint16

const (
	View_Constraint_Which_limit View_Constraint_Which = 0
	View_Constraint_Which_to    View_Constraint_Which = 1
)

func (w View_Constraint_Which) String() string {
	const s = "limitto"
	switch w {
	case View_Constraint_Which_limit:
		return s[0:5]
	case View_Constraint_Which_to:
		return s[5:7]

	}
	return "View_Constraint_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Constraint_TypeID is the unique identifier for the type View_Constraint.
const View_Constraint_TypeID = 0x92dd7cf694dc2a0d

func NewView_Constraint(s *capnp.Segment) (View_Constraint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Constraint(st), err
}

func NewRootView_Constraint(s *capnp.Segment) (View_Constraint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Constraint(st), err
}

func ReadRootView_Constraint(msg *capnp.Message) (View_Constraint, error) {
	root, err := msg.Root()
	return View_Constraint(root.Struct()), err
}

func (s View_Constraint) String() string {
	str, _ := text.Marshal(0x92dd7cf694dc2a0d, capnp.Struct(s))
	return str
}

func (s View_Constraint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Constraint) DecodeFromPtr(p capnp.Ptr) View_Constraint {
	return View_Constraint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Constraint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Constraint) Which() View_Constraint_Which {
	return View_Constraint_Which(capnp.Struct(s).Uint16(8))
}
func (s View_Constraint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Constraint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Constraint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Constraint) Limit() uint64 {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != limit")
	}
	return capnp.Struct(s).Uint64(0)
}

func (s View_Constraint) SetLimit(v uint64) {
	capnp.Struct(s).SetUint16(8, 0)
	capnp.Struct(s).SetUint64(0, v)
}

func (s View_Constraint) To() (View_Index, error) {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != to")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Index(p.Struct()), err
}

func (s View_Constraint) HasTo() bool {
	if capnp.Struct(s).Uint16(8) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Constraint) SetTo(v View_Index) error {
	capnp.Struct(s).SetUint16(8, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTo sets the to field to a newly
// allocated View_Index struct, preferring placement in s's segment.
func (s View_Constraint) NewTo() (View_Index, error) {
	capnp.Struct(s).SetUint16(8, 1)
	ss, err := NewView_Index(capnp.Struct(s).Segment())
	if err != nil {
		return View_Index{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Constraint_List is a list of View_Constraint.
type View_Constraint_List = capnp.StructList[View_Constraint]

// NewView_Constraint creates a new list of View_Constraint.
func NewView_Constraint_List(s *capnp.Segment, sz int32) (View_Constraint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[View_Constraint](l), err
}

// View_Constraint_Future is a wrapper for a View_Constraint promised by a client call.
type View_Constraint_Future struct{ *capnp.Future }

func (p View_Constraint_Future) Struct() (View_Constraint, error) {
	s, err := p.Future.Struct()
	return View_Constraint(s), err
}

func (p View_Constraint_Future) To() View_Index_Future {
	return View_Index_Future{Future: p.Future.Field(0, nil)}
}

type View_Index capnp.Struct
type View_Index_Which uint16

const (
	View_Index_Which_id   View_Index_Which = 0
	View_Index_Which_host View_Index_Which = 1
	View_Index_Which_meta View_Index_Which = 2
)

func (w View_Index_Which) String() string {
	const s = "idhostmeta"
	switch w {
	case View_Index_Which_id:
		return s[0:2]
	case View_Index_Which_host:
		return s[2:6]
	case View_Index_Which_meta:
		return s[6:10]

	}
	return "View_Index_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_Index_TypeID is the unique identifier for the type View_Index.
const View_Index_TypeID = 0xdb1aee7a06a493b6

func NewView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func NewRootView_Index(s *capnp.Segment) (View_Index, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_Index(st), err
}

func ReadRootView_Index(msg *capnp.Message) (View_Index, error) {
	root, err := msg.Root()
	return View_Index(root.Struct()), err
}

func (s View_Index) String() string {
	str, _ := text.Marshal(0xdb1aee7a06a493b6, capnp.Struct(s))
	return str
}

func (s View_Index) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Index) DecodeFromPtr(p capnp.Ptr) View_Index {
	return View_Index(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Index) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_Index) Which() View_Index_Which {
	return View_Index_Which(capnp.Struct(s).Uint16(2))
}
func (s View_Index) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Index) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Index) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Index) Prefix() bool {
	return capnp.Struct(s).Bit(0)
}

func (s View_Index) SetPrefix(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s View_Index) Id() (string, error) {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != id")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasId() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetId(v string) error {
	capnp.Struct(s).SetUint16(2, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Host() (string, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != host")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasHost() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetHost(v string) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Index) Meta() (string, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != meta")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Index) HasMeta() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Index) MetaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Index) SetMeta(v string) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetText(0, v)
}

// View_Index_List is a list of View_Index.
type View_Index_List = capnp.StructList[View_Index]

// NewView_Index creates a new list of View_Index.
func NewView_Index_List(s *capnp.Segment, sz int32) (View_Index_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_Index](l), err
}

// View_Index_Future is a wrapper for a View_Index promised by a client call.
type View_Index_Future struct{ *capnp.Future }

func (p View_Index_Future) Struct() (View_Index, error) {
	s, err := p.Future.Struct()
	return View_Index(s), err
}

type View_Record capnp.Struct

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xc390eec5b4e4aaef

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return View_Record(st), err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return View_Record(st), err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record(root.Struct()), err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xc390eec5b4e4aaef, capnp.Struct(s))
	return str
}

func (s View_Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_Record) DecodeFromPtr(p capnp.Ptr) View_Record {
	return View_Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_Record) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s View_Record) Seq() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s View_Record) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s View_Record) Heartbeat() (Heartbeat, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Heartbeat(p.Struct()), err
}

func (s View_Record) HasHeartbeat() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_Record) SetHeartbeat(v Heartbeat) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewHeartbeat sets the heartbeat field to a newly
// allocated Heartbeat struct, preferring placement in s's segment.
func (s View_Record) NewHeartbeat() (Heartbeat, error) {
	ss, err := NewHeartbeat(capnp.Struct(s).Segment())
	if err != nil {
		return Heartbeat{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_Record_List is a list of View_Record.
type View_Record_List = capnp.StructList[View_Record]

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[View_Record](l), err
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record(s), err
}

func (p View_Record_Future) Heartbeat() Heartbeat_Future {
	return Heartbeat_Future{Future: p.Future.Field(1, nil)}
}

type View_MaybeRecord capnp.Struct
type View_MaybeRecord_Which uint16

const (
	View_MaybeRecord_Which_nothing View_MaybeRecord_Which = 0
	View_MaybeRecord_Which_just    View_MaybeRecord_Which = 1
)

func (w View_MaybeRecord_Which) String() string {
	const s = "nothingjust"
	switch w {
	case View_MaybeRecord_Which_nothing:
		return s[0:7]
	case View_MaybeRecord_Which_just:
		return s[7:11]

	}
	return "View_MaybeRecord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// View_MaybeRecord_TypeID is the unique identifier for the type View_MaybeRecord.
const View_MaybeRecord_TypeID = 0xf107ba55f0ab3244

func NewView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func NewRootView_MaybeRecord(s *capnp.Segment) (View_MaybeRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_MaybeRecord(st), err
}

func ReadRootView_MaybeRecord(msg *capnp.Message) (View_MaybeRecord, error) {
	root, err := msg.Root()
	return View_MaybeRecord(root.Struct()), err
}

func (s View_MaybeRecord) String() string {
	str, _ := text.Marshal(0xf107ba55f0ab3244, capnp.Struct(s))
	return str
}

func (s View_MaybeRecord) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_MaybeRecord) DecodeFromPtr(p capnp.Ptr) View_MaybeRecord {
	return View_MaybeRecord(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_MaybeRecord) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s View_MaybeRecord) Which() View_MaybeRecord_Which {
	return View_MaybeRecord_Which(capnp.Struct(s).Uint16(0))
}
func (s View_MaybeRecord) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_MaybeRecord) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_MaybeRecord) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_MaybeRecord) SetNothing() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s View_MaybeRecord) Just() (View_Record, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != just")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return View_Record(p.Struct()), err
}

func (s View_MaybeRecord) HasJust() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s View_MaybeRecord) SetJust(v View_Record) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJust sets the just field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_MaybeRecord) NewJust() (View_Record, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewView_Record(capnp.Struct(s).Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_MaybeRecord_List is a list of View_MaybeRecord.
type View_MaybeRecord_List = capnp.StructList[View_MaybeRecord]

// NewView_MaybeRecord creates a new list of View_MaybeRecord.
func NewView_MaybeRecord_List(s *capnp.Segment, sz int32) (View_MaybeRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_MaybeRecord](l), err
}

// View_MaybeRecord_Future is a wrapper for a View_MaybeRecord promised by a client call.
type View_MaybeRecord_Future struct{ *capnp.Future }

func (p View_MaybeRecord_Future) Struct() (View_MaybeRecord, error) {
	s, err := p.Future.Struct()
	return View_MaybeRecord(s), err
}

func (p View_MaybeRecord_Future) Just() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type View_lookup_Params capnp.Struct

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xb06e55bb4d9bb7e2

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_lookup_Params(st), err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return View_lookup_Params(st), err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params(root.Struct()), err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xb06e55bb4d9bb7e2, capnp.Struct(s))
	return str
}

func (s View_lookup_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_lookup_Params) DecodeFromPtr(p capnp.Ptr) View_lookup_Params {
	return View_lookup_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_lookup_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_lookup_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_lookup_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_lookup_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_lookup_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_Selector(p.Struct()), err
}

func (s View_lookup_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_lookup_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_lookup_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_lookup_Params) Constraints() (View_Constraint_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return View_Constraint_List(p.List()), err
}

func (s View_lookup_Params) HasConstraints() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_lookup_Params) SetConstraints(v View_Constraint_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConstraints sets the constraints field to a newly
// allocated View_Constraint_List, preferring placement in s's segment.
func (s View_lookup_Params) NewConstraints(n int32) (View_Constraint_List, error) {
	l, err := NewView_Constraint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return View_Constraint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List = capnp.StructList[View_lookup_Params]

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[View_lookup_Params](l), err
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params(s), err
}

func (p View_lookup_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(0, nil)}
}

type View_lookup_Results capnp.Struct

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0x9bbf333a5450f2d0

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(st), err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Results(st), err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results(root.Struct()), err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0x9bbf333a5450f2d0, capnp.Struct(s))
	return str
}

func (s View_lookup_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_lookup_Results) DecodeFromPtr(p capnp.Ptr) View_lookup_Results {
	return View_lookup_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_lookup_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_lookup_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_lookup_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_lookup_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_lookup_Results) Result() (View_MaybeRecord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return View_MaybeRecord(p.Struct()), err
}

func (s View_lookup_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_lookup_Results) SetResult(v View_MaybeRecord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated View_MaybeRecord struct, preferring placement in s's segment.
func (s View_lookup_Results) NewResult() (View_MaybeRecord, error) {
	ss, err := NewView_MaybeRecord(capnp.Struct(s).Segment())
	if err != nil {
		return View_MaybeRecord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List = capnp.StructList[View_lookup_Results]

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Results](l), err
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results(s), err
}

func (p View_lookup_Results_Future) Result() View_MaybeRecord_Future {
	return View_MaybeRecord_Future{Future: p.Future.Field(0, nil)}
}

type View_iter_Params capnp.Struct

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0x8b8f9a8dbc645c7a

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return View_iter_Params(st), err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return View_iter_Params(st), err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params(root.Struct()), err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0x8b8f9a8dbc645c7a, capnp.Struct(s))
	return str
}

func (s View_iter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Params) DecodeFromPtr(p capnp.Ptr) View_iter_Params {
	return View_iter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_iter_Params) Handler() View_Handler {
	p, _ := capnp.Struct(s).Ptr(0)
	return View_Handler(p.Interface().Client())
}

func (s View_iter_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s View_iter_Params) Selector() (View_Selector, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return View_Selector(p.Struct()), err
}

func (s View_iter_Params) HasSelector() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s View_iter_Params) SetSelector(v View_Selector) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSelector sets the selector field to a newly
// allocated View_Selector struct, preferring placement in s's segment.
func (s View_iter_Params) NewSelector() (View_Selector, error) {
	ss, err := NewView_Selector(capnp.Struct(s).Segment())
	if err != nil {
		return View_Selector{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s View_iter_Params) Constraints() (View_Constraint_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return View_Constraint_List(p.List()), err
}

func (s View_iter_Params) HasConstraints() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s View_iter_Params) SetConstraints(v View_Constraint_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewConstraints sets the constraints field to a newly
// allocated View_Constraint_List, preferring placement in s's segment.
func (s View_iter_Params) NewConstraints(n int32) (View_Constraint_List, error) {
	l, err := NewView_Constraint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return View_Constraint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List = capnp.StructList[View_iter_Params]

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[View_iter_Params](l), err
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params(s), err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler(p.Future.Field(0, nil).Client())
}

func (p View_iter_Params_Future) Selector() View_Selector_Future {
	return View_Selector_Future{Future: p.Future.Field(1, nil)}
}

type View_iter_Results capnp.Struct

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0x9764ff97950b0e11

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results(st), err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results(root.Struct()), err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0x9764ff97950b0e11, capnp.Struct(s))
	return str
}

func (s View_iter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_iter_Results) DecodeFromPtr(p capnp.Ptr) View_iter_Results {
	return View_iter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_iter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_iter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_iter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_iter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List = capnp.StructList[View_iter_Results]

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_iter_Results](l), err
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results(s), err
}

type View_reverse_Params capnp.Struct

// View_reverse_Params_TypeID is the unique identifier for the type View_reverse_Params.
const View_reverse_Params_TypeID = 0x81107838ed1339e2

func NewView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func NewRootView_reverse_Params(s *capnp.Segment) (View_reverse_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_reverse_Params(st), err
}

func ReadRootView_reverse_Params(msg *capnp.Message) (View_reverse_Params, error) {
	root, err := msg.Root()
	return View_reverse_Params(root.Struct()), err
}

func (s View_reverse_Params) String() string {
	str, _ := text.Marshal(0x81107838ed1339e2, capnp.Struct(s))
	return str
}

func (s View_reverse_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Params) DecodeFromPtr(p capnp.Ptr) View_reverse_Params {
	return View_reverse_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// View_reverse_Params_List is a list of View_reverse_Params.
type View_reverse_Params_List = capnp.StructList[View_reverse_Params]

// NewView_reverse_Params creates a new list of View_reverse_Params.
func NewView_reverse_Params_List(s *capnp.Segment, sz int32) (View_reverse_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_reverse_Params](l), err
}

// View_reverse_Params_Future is a wrapper for a View_reverse_Params promised by a client call.
type View_reverse_Params_Future struct{ *capnp.Future }

func (p View_reverse_Params_Future) Struct() (View_reverse_Params, error) {
	s, err := p.Future.Struct()
	return View_reverse_Params(s), err
}

type View_reverse_Results capnp.Struct

// View_reverse_Results_TypeID is the unique identifier for the type View_reverse_Results.
const View_reverse_Results_TypeID = 0xb999cf53764e76ae

func NewView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func NewRootView_reverse_Results(s *capnp.Segment) (View_reverse_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_reverse_Results(st), err
}

func ReadRootView_reverse_Results(msg *capnp.Message) (View_reverse_Results, error) {
	root, err := msg.Root()
	return View_reverse_Results(root.Struct()), err
}

func (s View_reverse_Results) String() string {
	str, _ := text.Marshal(0xb999cf53764e76ae, capnp.Struct(s))
	return str
}

func (s View_reverse_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (View_reverse_Results) DecodeFromPtr(p capnp.Ptr) View_reverse_Results {
	return View_reverse_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s View_reverse_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s View_reverse_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s View_reverse_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s View_reverse_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s View_reverse_Results) View() View {
	p, _ := capnp.Struct(s).Ptr(0)
	return View(p.Interface().Client())
}

func (s View_reverse_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s View_reverse_Results) SetView(v View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// View_reverse_Results_List is a list of View_reverse_Results.
type View_reverse_Results_List = capnp.StructList[View_reverse_Results]

// NewView_reverse_Results creates a new list of View_reverse_Results.
func NewView_reverse_Results_List(s *capnp.Segment, sz int32) (View_reverse_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_reverse_Results](l), err
}

// View_reverse_Results_Future is a wrapper for a View_reverse_Results promised by a client call.
type View_reverse_Results_Future struct{ *capnp.Future }

func (p View_reverse_Results_Future) Struct() (View_reverse_Results, error) {
	s, err := p.Future.Struct()
	return View_reverse_Results(s), err
}

func (p View_reverse_Results_Future) View() View {
	return View(p.Future.Field(0, nil).Client())
}

const schema_c2974e3dc137fcee = "x\xda\xacUm\x88TU\x18~\xdfs\xe6\xce\x9d\xc9" +
	"\x9d\x8f\xe3\xdd VdQ\\h\x07Vt\xb7(\x07" +
	"b\x96\xd5\xa5U\\\x99\xb3jd\x18vw\xe6\xe8\xdc" +
	"\x9a\x8f\xed\xde\xbb\xbbf\xd1\xd2\xc7\xbf\x88\"\x0bQ\x09" +
	"\"\x82\xa40\x13\xa2\x0f3JE\xc2HJ\xff\x08\x95" +
	"\x04\"\x84D\xda\x0aFHv\xe3\xdc\xb9\xf7\x9eqv" +
	"\xdd_\xfd\x9b\xb9\xf7\xbd\xefy\x9e\xf7}\x9e\xe7\xac\xea" +
	"\xa3\x83\xb1\xd5\xa9k:\x10\xbe]\x8b{\x97\xd6\x18\x7f" +
	"<\xb8;\xfb\x020\x03\x01b:\xc0\xc0E\xba\x18!" +
	"\xe6\xbd\x98N_\xb8\xfc\xce\xf1\x97\x80\xa7\x91xW\xff" +
	"y\xe0\xc4C\x9b\xf6\x9d\x04\x8d\xe8\x00\xc6iz\xd28" +
	"K\xe5\xaf3\xf47@o\xcf\xf6\xf2\xf1W\x0f\xbc\xf6" +
	"J\xb3\x8d\xe6\xbf9\x1c\xbb\x09h\x1c\x8d\x1d\x01\xf4R" +
	"\xb9_\xde\xfc\xeb\xb9\x8bo\x007\x90x\xe7\x7f}\xfb" +
	"\xd0\xa2%\xdf\x7f\x0e\xc3\xa8\x13\x8c\x19\xa6v\xdd\xa8i" +
	"\xf2\x1bK\x9b\x06\xf4\x12;\xbc\xbe\x0b\xef.\xdb\x0b\xcc" +
	"\xa0\xaa\x18\xd08\xad\xfdd\x9c\xf3\x0b\xcfj\x0f\x1b7" +
	"\xe4/\x8f\xa5\x17\xbd\xb5\xcf+\xefke\xa0\x11\xc9\xe0" +
	"\xc7\xeb\xc5-\xf9\x81\xaf\x0f\x06\xa0P\xbe:\xa1-F" +
	"@\xe3\x8cV\x00\xf4.}vp\xf4\xcb\xad\xf5\x8f\x83" +
	"\x02\xc9l\xe0\x8av\x97,\x98\xf5\x81Dg\xb34U" +
	"#\x004D\xfc\x80Q\x8b\xef\x020\xbe\x8a\x7fk\xdc" +
	"\xafK \x1fMm\x9a\xda\xfc\xc3\xfe/Z\x8f[\xaa" +
	"w\xc9n=\xba<\xee\xda\x07\x97?9}\xf5\xf5S" +
	"r\x08-\xbd\x9b\x13\x1d\xd6\xcf\x1b\\\xf61Fu9" +
	"\xb1O\xf7\xbe\x17\xdfs\xb5\xeb\xe7\xb6\xe2a\xd4)\xa2" +
	"qE\xff\xce\xb8\xe1W\xcf\xear\xfe\xeb\xfa?\xfcs" +
	"\xeb1}vn5\x91\xdbJ\xdc4\xce%\xfc\xb1%" +
	"$-\xef\xfd\xc3\xa3;Om\x9d\x05\xb6$B\xda\x9b" +
	"\xccK\xa4\xab\x93\x12\xe9\xa1\xeeg\x8f\xad{\xfe\xf7\xbf" +
	"\xe79\x1c\xc0\xe0\xc9K\xc6\xe3I\xd9n[\xf2\x08l" +
	"\xf3\xec\xc6\xa4k\xd5w\xad\xa4%s\xa2>\x91\x7f\xc4" +
	"\x12\xd3+m1%lG\xac(\x9a\xb6YC'\xaa" +
	"!\xcd\x9a\x11a\xda\xee\xb80](\"\xf2,\x8d\x01" +
	"\xc4\x10\x80\x99\xcb\x01\xf8v\x8a\xbcB\x90!v\xa2|" +
	"(\xf2\x00\xfc\x09\x8a\xbcJ\x10I'\x12\x00f\xe5\x00" +
	"x\x99\"\x9f \xc8(v\"\x05`5\xf9\xb0B\x91" +
	"\xbfLPw\xdd*&\x80`\x02\xb0\xe0\x08{J\xd8" +
	"\x98\x04\x82I\xc0L\xa5\xe1\xb8\xd8\x01\x04;\x0035" +
	"\xe1\x9a\x98\x06,R\xf4\x9f\xa5\x01\xdb\xd1\xfa\x8c,W" +
	"\xd8+\x0a>\x1f\x87wD\x88\x87\x87\x00\xf8 E\xbe" +
	"\xb1\x05\xf1\xfa\x0d\x00|\x84\"\xdfB\x90\x91\x002\x1f" +
	"\x07\xe0\xc5&\x8d\x99\x8aY/W\x85\x8dL\x89\x1d\x10" +
	"\x19\xa0\xe7\x88\xaa(\xb9\x0d\x1b\x000\xab6\x01\x88Y" +
	"@\xaf\xd4\xa8;\xaemZ\xa0\xd7]'\x84\x9dU\xfe" +
	"\x02\xbc#\x81\xb5\xf2\xd3n\xdb\xb4\xea\xae\x1cz\x82\xc6" +
	":<\xcf\xe7\xd0\xdb\x0f\xc0WP\xe4\xab\x08\xa6\xf0_" +
	"\xafI\xa2\xaf\x0b\x80\xdfK\x91\xdfG\xb0\xbbj\xd5," +
	"7\x1c u\x1b\x98U\x0a\x0d\xa0\xcdw\xe6\x88\xa4I" +
	"\x85-\x0f\x8cQ\x0d \xd2\x1e\xd6\x8f~3=p`" +
	"\xc7~\xc6r@\x98\xa6glQ\x9a\x1a\xc4\"\xaaN" +
	"z\xfb\xf8\xc7\x843Yu\x1d\x08\x0bZ\xdeW\x1b\x8d" +
	"\xa7&'\x82\x0atx,\xdaPJ\xca'A\x91w" +
	"\x12,\xd8\xcd\xf7Y\xe5\x986\xf4tn\xcf\xe6\xce\xfd" +
	"&a\xcf\xde\x0dj6\xd1\xd6W\xcb\x05\xafjJ\xe1" +
	"\xff]#\x86\xa0\xa8\x98\xe6\xf7`kB\xf6\x0e\xa9\xe6" +
	"\xacg\x83j\xc1z\x1eS+b=\xfd*~\xd8\xb2" +
	"\xbc\xa2\xcf\x96\x8e\xcf\x8c4\xc5\xe8mV\x98\xbd\xb5!" +
	"BZw\xbb\xd7\xd7\xcbbwaL\x94\x1av\xd9\x1b" +
	"5\x9f\x19\x17c\xa2\x04z\xc3.\xf3\x0e\x7f\xaba\x92" +
	"b\x98\xb9\x8c\xe7\x81\xb0a\x1d\xd5\xdd\x80aR\xb35" +
	"r\xe3}:\x92\xe8\xfa\xc10<\xd9\xb2! \xecn" +
	"\xbd\xd0\x9c\xfd f\xe4\xe2\x07q&\x08\x94\xdb\x052" +
	"_\xe2\xf8\x0a\xa0\xeem\x0a\xc8)\x05d\xa6,1\x8d" +
	"\xac\xf5Z\xf1m7\x9fz}\xc2X\x96\xe2m1|" +
	"N\x19>\xf2\xbb\x8c\xadu\x14yQ\xfa\x1d\x9b~\x1f" +
	"\x1d\x03\xe0\x1b)\xf2G\x09f&\x84\xb0\xc3\xc8\xd1\x1d" +
	"\xf1th%\xaf\x12$!\xa0Tet\xe9.\xe0)" +
	"\x7f\x19\xd0\x1e\x9cy\x15\x9c)\xf4\x02\x0b\x8b.\x95\x9c" +
	")\"\x8d\xdd\x9e\x9d)z\xcbk\x0bO\x97`a\xc2" +
	"\x16;\xad\xdd\x88@\x10\x01\xa9U\x8e\xe2rnv\x06" +
	"\x7f\xe6\xc5\xeak%\x10N{\xe8\x0c\xcd\x1b:9e" +
	"\xac\x99z\xc3\xadX\xf5]\x10\xcf<9\xe9\xc8\xf1D" +
	"\x12^\xc0\xb4\x81\x98W\xca8\x89\xf2\xfa\x8ei \x81" +
	"-\xd0\xb8\x95\x8b\xef\x0e\xddm\xd8\x81\x1eB\"\xc3\xcb" +
	"\x95 \x14\x91\xf5\xfdJ\x12)r+\x18\xfdhN]" +
	"\x0c\xbaY\xadB\xbc\xbbf\xba\xa5\xca\xdc8\xcd\xec\xb4" +
	"\x1b\xb5\xb9\x8f\xff\x0b\x00\x00\xff\xffZ)\xb3\xf5"

func init() {
	schemas.Register(schema_c2974e3dc137fcee,
		0x81107838ed1339e2,
		0x83bca0e4d70e0e82,
		0x8b8f9a8dbc645c7a,
		0x92dd7cf694dc2a0d,
		0x9321a2d72dff5f08,
		0x9764ff97950b0e11,
		0x9bbf333a5450f2d0,
		0xb06e55bb4d9bb7e2,
		0xb8cc1b0ba89ddfd2,
		0xb999cf53764e76ae,
		0xc390eec5b4e4aaef,
		0xdb1aee7a06a493b6,
		0xf107ba55f0ab3244,
		0xf155c3664dada7ff,
		0xf8eb7e44ba7b1fa8)
}
