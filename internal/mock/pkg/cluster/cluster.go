// Code generated by MockGen. DO NOT EDIT.
// Source: cluster.go

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	pubsub "github.com/libp2p/go-libp2p-pubsub"
	routing "github.com/wetware/casm/pkg/cluster/routing"
)

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Join mocks base method.
func (m *MockPubSub) Join(arg0 string, arg1 ...pubsub.TopicOpt) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join.
func (mr *MockPubSubMockRecorder) Join(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockPubSub)(nil).Join), varargs...)
}

// RegisterTopicValidator mocks base method.
func (m *MockPubSub) RegisterTopicValidator(arg0 string, arg1 interface{}, arg2 ...pubsub.ValidatorOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTopicValidator", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTopicValidator indicates an expected call of RegisterTopicValidator.
func (mr *MockPubSubMockRecorder) RegisterTopicValidator(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTopicValidator", reflect.TypeOf((*MockPubSub)(nil).RegisterTopicValidator), varargs...)
}

// UnregisterTopicValidator mocks base method.
func (m *MockPubSub) UnregisterTopicValidator(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTopicValidator", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterTopicValidator indicates an expected call of UnregisterTopicValidator.
func (mr *MockPubSubMockRecorder) UnregisterTopicValidator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTopicValidator", reflect.TypeOf((*MockPubSub)(nil).UnregisterTopicValidator), arg0)
}

// MockRoutingTable is a mock of RoutingTable interface.
type MockRoutingTable struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingTableMockRecorder
}

// MockRoutingTableMockRecorder is the mock recorder for MockRoutingTable.
type MockRoutingTableMockRecorder struct {
	mock *MockRoutingTable
}

// NewMockRoutingTable creates a new mock instance.
func NewMockRoutingTable(ctrl *gomock.Controller) *MockRoutingTable {
	mock := &MockRoutingTable{ctrl: ctrl}
	mock.recorder = &MockRoutingTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutingTable) EXPECT() *MockRoutingTableMockRecorder {
	return m.recorder
}

// Advance mocks base method.
func (m *MockRoutingTable) Advance(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Advance", arg0)
}

// Advance indicates an expected call of Advance.
func (mr *MockRoutingTableMockRecorder) Advance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockRoutingTable)(nil).Advance), arg0)
}

// Snapshot mocks base method.
func (m *MockRoutingTable) Snapshot() routing.Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(routing.Snapshot)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockRoutingTableMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockRoutingTable)(nil).Snapshot))
}

// Upsert mocks base method.
func (m *MockRoutingTable) Upsert(arg0 routing.Record) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRoutingTableMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRoutingTable)(nil).Upsert), arg0)
}
